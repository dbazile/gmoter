"""
Poor man's pygtk2 stub

Because IntelliJ doesn't want to frickin cooperate... >_>
"""


#
# Classes
#

class AboutDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """List of people who have contributed artwork to the program"""
    artists = None  # type: GStrv

    """List of authors of the program"""
    authors = None  # type: GStrv

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Comments about the program"""
    comments = None  # type: str

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Copyright information for the program"""
    copyright = None  # type: str

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """List of people documenting the program"""
    documenters = None  # type: GStrv

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The license of the program"""
    license = None  # type: str

    """A logo for the about box. If this is not set, it defaults to gtk_window_get_default_icon_list()"""
    logo = None  # type: GdkPixbuf

    """A named icon to use as the logo for the about box."""
    logo_icon_name = None  # type: str

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """The name of the program. If this is not set, it defaults to g_get_application_name()"""
    program_name = None  # type: str

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """Credits to the translators. This string should be marked as translatable"""
    translator_credits = None  # type: str

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The version of the program"""
    version = None  # type: str

    """Whether the widget is visible"""
    visible = None  # type: bool

    """The URL for the link to the website of the program"""
    website = None  # type: str

    """The label for the link to the website of the program. If this is not set, it defaults to the URL"""
    website_label = None  # type: str

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    """Whether to wrap the license text."""
    wrap_license = None  # type: bool

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def activate_link(self, arg_1: gchararray) -> bool: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class AccelGroup:
    """Is the accel group locked"""
    is_locked = None  # type: bool

    """Modifier Mask"""
    modifier_mask = None  # type: GdkModifierType

    def __init__(self): ...
    def accel_activate(self, arg_1: GObject, arg_2: guint, arg_3: GdkModifierType) -> bool: ...
    def accel_changed(self, arg_1: guint, arg_2: GdkModifierType, arg_3: GClosure) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class AccelLabel:
    """The closure to be monitored for accelerator changes"""
    accel_closure = None  # type: GClosure

    """The widget to be monitored for accelerator changes"""
    accel_widget = None  # type: GtkWidget

    """Angle at which the label is rotated"""
    angle = None  # type: gdouble

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """A list of style attributes to apply to the text of the label"""
    attributes = None  # type: PangoAttrList

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The current position of the insertion cursor in chars"""
    cursor_position = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The preferred place to ellipsize the string, if the label does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that"""
    justify = None  # type: GtkJustification

    """The text of the label"""
    label = None  # type: str

    """The desired maximum width of the label, in characters"""
    max_width_chars = None  # type: gint

    """The mnemonic accelerator key for this label"""
    mnemonic_keyval = None  # type: guint

    """The widget to be activated when the label's mnemonic key is pressed"""
    mnemonic_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """A string with _ characters in positions correspond to characters in the text to underline"""
    pattern = None  # type: str

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the label text can be selected with the mouse"""
    selectable = None  # type: bool

    """The position of the opposite end of the selection from the cursor in chars"""
    selection_bound = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the label is in single line mode"""
    single_line_mode = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether visited links should be tracked"""
    track_visited_links = None  # type: bool

    """The text of the label includes XML markup. See pango_parse_markup()"""
    use_markup = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """If set, wrap lines if the text becomes too wide"""
    wrap = None  # type: bool

    """If wrap is set, controls how linewrapping is done"""
    wrap_mode = None  # type: PangoWrapMode

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current_link(self) -> None: ...
    def activate_link(self, arg_1: gchararray) -> bool: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint, arg_3: gboolean) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def populate_popup(self, arg_1: GtkMenu) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class AccelMap:


    def __init__(self): ...
    def changed(self, arg_1: gchararray, arg_2: guint, arg_3: GdkModifierType) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class Accessible:
    """The accessible layer of this object"""
    accessible_component_layer = None  # type: gint

    """The accessible MDI value of this object"""
    accessible_component_mdi_zorder = None  # type: gint

    """Description of an object, formatted for assistive technology access"""
    accessible_description = None  # type: str

    """The number of links which the current AtkHypertext has"""
    accessible_hypertext_nlinks = None  # type: gint

    """Object instance’s name formatted for assistive technology access"""
    accessible_name = None  # type: str

    """Parent of the current accessible as returned by atk_object_get_parent()"""
    accessible_parent = None  # type: AtkObject

    """The accessible role of this object"""
    accessible_role = None  # type: AtkRole

    """Is used to notify that the table caption has changed; this property should not be used. accessible-table-caption-object should be used instead"""
    accessible_table_caption = None  # type: str

    """Is used to notify that the table caption has changed"""
    accessible_table_caption_object = None  # type: AtkObject

    """Is used to notify that the table column description has changed"""
    accessible_table_column_description = None  # type: str

    """Is used to notify that the table column header has changed"""
    accessible_table_column_header = None  # type: AtkObject

    """Is used to notify that the table row description has changed"""
    accessible_table_row_description = None  # type: str

    """Is used to notify that the table row header has changed"""
    accessible_table_row_header = None  # type: AtkObject

    """Is used to notify that the table summary has changed"""
    accessible_table_summary = None  # type: AtkObject

    """Is used to notify that the value has changed"""
    accessible_value = None  # type: gdouble

    def __init__(self): ...
    def active_descendant_changed(self, arg_1: gpointer) -> None: ...
    def children_changed(self, arg_1: guint, arg_2: gpointer) -> None: ...
    def focus_event(self, arg_1: gboolean) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def property_change(self, arg_1: gpointer) -> None: ...
    def state_change(self, arg_1: gchararray, arg_2: gboolean) -> None: ...
    def visible_data_changed(self) -> None: ...


class Action:
    """The GtkActionGroup this GtkAction is associated with, or NULL (for internal use)."""
    action_group = None  # type: GtkActionGroup

    """Whether the image will always be shown"""
    always_show_image = None  # type: bool

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """When TRUE, empty menu proxies for this action are hidden."""
    hide_if_empty = None  # type: bool

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode."""
    is_important = None  # type: bool

    """The label used for menu items and buttons that activate this action."""
    label = None  # type: str

    """A unique name for the action."""
    name = None  # type: str

    """Whether the action is enabled."""
    sensitive = None  # type: bool

    """A shorter label that may be used on toolbar buttons."""
    short_label = None  # type: str

    """The stock icon displayed in widgets representing this action."""
    stock_id = None  # type: str

    """A tooltip for this action."""
    tooltip = None  # type: str

    """Whether the action is visible."""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu."""
    visible_overflown = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    def __init__(self): ...
    def activate(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class ActionGroup:
    """A name for the action group."""
    name = None  # type: str

    """Whether the action group is enabled."""
    sensitive = None  # type: bool

    """Whether the action group is visible."""
    visible = None  # type: bool

    def __init__(self): ...
    def connect_proxy(self, arg_1: GtkAction, arg_2: GtkWidget) -> None: ...
    def disconnect_proxy(self, arg_1: GtkAction, arg_2: GtkWidget) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def post_activate(self, arg_1: GtkAction) -> None: ...
    def pre_activate(self, arg_1: GtkAction) -> None: ...


class Activatable:


    def __init__(self): ...


class Adjustment:
    """The minimum value of the adjustment"""
    lower = None  # type: gdouble

    """The page increment of the adjustment"""
    page_increment = None  # type: gdouble

    """The page size of the adjustment"""
    page_size = None  # type: gdouble

    """The step increment of the adjustment"""
    step_increment = None  # type: gdouble

    """The maximum value of the adjustment"""
    upper = None  # type: gdouble

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The value of the adjustment"""
    value = None  # type: gdouble

    def __init__(self): ...
    def changed(self) -> None: ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def value_changed(self) -> None: ...


class Alignment:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """The padding to insert at the bottom of the widget."""
    bottom_padding = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The padding to insert at the left of the widget."""
    left_padding = None  # type: guint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """The padding to insert at the right of the widget."""
    right_padding = None  # type: guint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The padding to insert at the top of the widget."""
    top_padding = None  # type: guint

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """If available horizontal space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all"""
    xscale = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    """If available vertical space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all"""
    yscale = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Arrow:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The direction the arrow should point"""
    arrow_type = None  # type: GtkArrowType

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Appearance of the shadow surrounding the arrow"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class AspectFrame:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the frame's label"""
    label = None  # type: str

    """A widget to display in place of the usual frame label"""
    label_widget = None  # type: GtkWidget

    """The horizontal alignment of the label"""
    label_xalign = None  # type: gfloat

    """The vertical alignment of the label"""
    label_yalign = None  # type: gfloat

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """Force aspect ratio to match that of the frame's child"""
    obey_child = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Aspect ratio if obey_child is FALSE"""
    ratio = None  # type: gfloat

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Deprecated property, use shadow_type instead"""
    shadow = None  # type: GtkShadowType

    """Appearance of the frame border"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """X alignment of the child"""
    xalign = None  # type: gfloat

    """Y alignment of the child"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Assistant:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def apply(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def prepare(self, arg_1: GtkWidget) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Bin:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Border:


    def __init__(self): ...


class Box:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Buildable:


    def __init__(self): ...


class Builder:
    """The translation domain used by gettext"""
    translation_domain = None  # type: str

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class Button:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ButtonBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """How to lay out the buttons in the box. Possible values are: default, spread, edge, start and end"""
    layout_style = None  # type: GtkButtonBoxStyle

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CList:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    n_columns = None  # type: guint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    reorderable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    row_height = None  # type: guint

    selection_mode = None  # type: GtkSelectionMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    shadow_type = None  # type: GtkShadowType

    sort_type = None  # type: GtkSortType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    titles_active = None  # type: bool

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    use_drag_icons = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def abort_column_resize(self) -> None: ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def click_column(self, arg_1: gint) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def end_selection(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def extend_selection(self, arg_1: GtkScrollType, arg_2: gfloat, arg_3: gboolean) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def resize_column(self, arg_1: gint, arg_2: gint) -> None: ...
    def row_move(self, arg_1: gint, arg_2: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def scroll_horizontal(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def scroll_vertical(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def select_all(self) -> None: ...
    def select_row(self, arg_1: gint, arg_2: gint, arg_3: GdkEvent) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def start_selection(self) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_add_mode(self) -> None: ...
    def toggle_focus_row(self) -> None: ...
    def undo_selection(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_row(self, arg_1: gint, arg_2: gint, arg_3: GdkEvent) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CTree:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    expander_style = None  # type: GtkCTreeExpanderStyle

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    indent = None  # type: guint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    line_style = None  # type: GtkCTreeLineStyle

    n_columns = None  # type: guint

    n_columns = None  # type: guint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    reorderable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    row_height = None  # type: guint

    selection_mode = None  # type: GtkSelectionMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    shadow_type = None  # type: GtkShadowType

    show_stub = None  # type: bool

    sort_type = None  # type: GtkSortType

    spacing = None  # type: guint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    titles_active = None  # type: bool

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    tree_column = None  # type: guint

    use_drag_icons = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def abort_column_resize(self) -> None: ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_focus_row_expansion(self, arg_1: GtkCTreeExpansionType) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def click_column(self, arg_1: gint) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def end_selection(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def extend_selection(self, arg_1: GtkScrollType, arg_2: gfloat, arg_3: gboolean) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def resize_column(self, arg_1: gint, arg_2: gint) -> None: ...
    def row_move(self, arg_1: gint, arg_2: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def scroll_horizontal(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def scroll_vertical(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def select_all(self) -> None: ...
    def select_row(self, arg_1: gint, arg_2: gint, arg_3: GdkEvent) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def start_selection(self) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_add_mode(self) -> None: ...
    def toggle_focus_row(self) -> None: ...
    def tree_collapse(self, arg_1: GtkCTreeNode) -> None: ...
    def tree_expand(self, arg_1: GtkCTreeNode) -> None: ...
    def tree_move(self, arg_1: GtkCTreeNode, arg_2: GtkCTreeNode, arg_3: GtkCTreeNode) -> None: ...
    def tree_select_row(self, arg_1: GtkCTreeNode, arg_2: gint) -> None: ...
    def tree_unselect_row(self, arg_1: GtkCTreeNode, arg_2: gint) -> None: ...
    def undo_selection(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_all(self) -> None: ...
    def unselect_row(self, arg_1: gint, arg_2: gint, arg_3: GdkEvent) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CTreeNode:


    def __init__(self): ...


class Calendar:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day)"""
    day = None  # type: gint

    """Details height in rows"""
    detail_height_rows = None  # type: gint

    """Details width in characters"""
    detail_width_chars = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The selected month (as a number between 0 and 11)"""
    month = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """If TRUE, the selected month cannot be changed"""
    no_month_change = None  # type: bool

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """If TRUE, day names are displayed"""
    show_day_names = None  # type: bool

    """If TRUE, details are shown"""
    show_details = None  # type: bool

    """If TRUE, a heading is displayed"""
    show_heading = None  # type: bool

    """If TRUE, week numbers are displayed"""
    show_week_numbers = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The selected year"""
    year = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def day_selected(self) -> None: ...
    def day_selected_double_click(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def month_changed(self) -> None: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def next_month(self) -> None: ...
    def next_year(self) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def prev_month(self) -> None: ...
    def prev_year(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CellEditable:


    def __init__(self): ...


class CellLayout:


    def __init__(self): ...


class CellRenderer:
    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererAccel:
    """The keyval of the accelerator"""
    accel_key = None  # type: guint

    """The type of accelerators"""
    accel_mode = None  # type: GtkCellRendererAccelMode

    """The modifier mask of the accelerator"""
    accel_mods = None  # type: GdkModifierType

    """Whether this tag affects the alignment mode"""
    align_set = None  # type: bool

    """How to align the lines"""
    alignment = None  # type: PangoAlignment

    """A list of style attributes to apply to the text of the renderer"""
    attributes = None  # type: PangoAttrList

    """Background color as a string"""
    background = None  # type: str

    """Background color as a GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """Whether this tag affects text editability"""
    editable_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """Whether this tag affects the ellipsize mode"""
    ellipsize_set = None  # type: bool

    """Name of the font family, e.g. Sans, Helvetica, Times, Monospace"""
    family = None  # type: str

    """Whether this tag affects the font family"""
    family_set = None  # type: bool

    """Font description as a string, e.g. "Sans Italic 12""""
    font = None  # type: str

    """Font description as a PangoFontDescription struct"""
    font_desc = None  # type: PangoFontDescription

    """Foreground color as a string"""
    foreground = None  # type: str

    """Foreground color as a GdkColor"""
    foreground_gdk = None  # type: GdkColor

    """Whether this tag affects the foreground color"""
    foreground_set = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """The hardware keycode of the accelerator"""
    keycode = None  # type: guint

    """The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it"""
    language = None  # type: str

    """Whether this tag affects the language the text is rendered as"""
    language_set = None  # type: bool

    """Marked up text to render"""
    markup = None  # type: str

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Offset of text above the baseline (below the baseline if rise is negative)"""
    rise = None  # type: gint

    """Whether this tag affects the rise"""
    rise_set = None  # type: bool

    """Font scaling factor"""
    scale = None  # type: gdouble

    """Whether this tag scales the font size by a factor"""
    scale_set = None  # type: bool

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Whether or not to keep all text in a single paragraph"""
    single_paragraph_mode = None  # type: bool

    """Font size"""
    size = None  # type: gint

    """Font size in points"""
    size_points = None  # type: gdouble

    """Whether this tag affects the font size"""
    size_set = None  # type: bool

    """Font stretch"""
    stretch = None  # type: PangoStretch

    """Whether this tag affects the font stretch"""
    stretch_set = None  # type: bool

    """Whether to strike through the text"""
    strikethrough = None  # type: bool

    """Whether this tag affects strikethrough"""
    strikethrough_set = None  # type: bool

    """Font style"""
    style = None  # type: PangoStyle

    """Whether this tag affects the font style"""
    style_set = None  # type: bool

    """Text to render"""
    text = None  # type: str

    """Style of underline for this text"""
    underline = None  # type: PangoUnderline

    """Whether this tag affects underlining"""
    underline_set = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Font variant"""
    variant = None  # type: PangoVariant

    """Whether this tag affects the font variant"""
    variant_set = None  # type: bool

    """Display the cell"""
    visible = None  # type: bool

    """Font weight"""
    weight = None  # type: gint

    """Whether this tag affects the font weight"""
    weight_set = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string"""
    wrap_mode = None  # type: PangoWrapMode

    """The width at which the text is wrapped"""
    wrap_width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def accel_cleared(self, arg_1: gchararray) -> None: ...
    def accel_edited(self, arg_1: gchararray, arg_2: guint, arg_3: GdkModifierType, arg_4: guint) -> None: ...
    def destroy(self) -> None: ...
    def edited(self, arg_1: gchararray, arg_2: gchararray) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererCombo:
    """Whether this tag affects the alignment mode"""
    align_set = None  # type: bool

    """How to align the lines"""
    alignment = None  # type: PangoAlignment

    """A list of style attributes to apply to the text of the renderer"""
    attributes = None  # type: PangoAttrList

    """Background color as a string"""
    background = None  # type: str

    """Background color as a GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """Whether this tag affects text editability"""
    editable_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """Whether this tag affects the ellipsize mode"""
    ellipsize_set = None  # type: bool

    """Name of the font family, e.g. Sans, Helvetica, Times, Monospace"""
    family = None  # type: str

    """Whether this tag affects the font family"""
    family_set = None  # type: bool

    """Font description as a string, e.g. "Sans Italic 12""""
    font = None  # type: str

    """Font description as a PangoFontDescription struct"""
    font_desc = None  # type: PangoFontDescription

    """Foreground color as a string"""
    foreground = None  # type: str

    """Foreground color as a GdkColor"""
    foreground_gdk = None  # type: GdkColor

    """Whether this tag affects the foreground color"""
    foreground_set = None  # type: bool

    """If FALSE, don't allow to enter strings other than the chosen ones"""
    has_entry = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it"""
    language = None  # type: str

    """Whether this tag affects the language the text is rendered as"""
    language_set = None  # type: bool

    """Marked up text to render"""
    markup = None  # type: str

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """The model containing the possible values for the combo box"""
    model = None  # type: GtkTreeModel

    """Offset of text above the baseline (below the baseline if rise is negative)"""
    rise = None  # type: gint

    """Whether this tag affects the rise"""
    rise_set = None  # type: bool

    """Font scaling factor"""
    scale = None  # type: gdouble

    """Whether this tag scales the font size by a factor"""
    scale_set = None  # type: bool

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Whether or not to keep all text in a single paragraph"""
    single_paragraph_mode = None  # type: bool

    """Font size"""
    size = None  # type: gint

    """Font size in points"""
    size_points = None  # type: gdouble

    """Whether this tag affects the font size"""
    size_set = None  # type: bool

    """Font stretch"""
    stretch = None  # type: PangoStretch

    """Whether this tag affects the font stretch"""
    stretch_set = None  # type: bool

    """Whether to strike through the text"""
    strikethrough = None  # type: bool

    """Whether this tag affects strikethrough"""
    strikethrough_set = None  # type: bool

    """Font style"""
    style = None  # type: PangoStyle

    """Whether this tag affects the font style"""
    style_set = None  # type: bool

    """Text to render"""
    text = None  # type: str

    """A column in the data source model to get the strings from"""
    text_column = None  # type: gint

    """Style of underline for this text"""
    underline = None  # type: PangoUnderline

    """Whether this tag affects underlining"""
    underline_set = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Font variant"""
    variant = None  # type: PangoVariant

    """Whether this tag affects the font variant"""
    variant_set = None  # type: bool

    """Display the cell"""
    visible = None  # type: bool

    """Font weight"""
    weight = None  # type: gint

    """Whether this tag affects the font weight"""
    weight_set = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string"""
    wrap_mode = None  # type: PangoWrapMode

    """The width at which the text is wrapped"""
    wrap_width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def changed(self, arg_1: gchararray, arg_2: GtkTreeIter) -> None: ...
    def destroy(self) -> None: ...
    def edited(self, arg_1: gchararray, arg_2: gchararray) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererPixbuf:
    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """Whether the rendered pixbuf should be colorized according to the state"""
    follow_state = None  # type: bool

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """The fixed height"""
    height = None  # type: gint

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """The pixbuf to render"""
    pixbuf = None  # type: GdkPixbuf

    """Pixbuf for closed expander"""
    pixbuf_expander_closed = None  # type: GdkPixbuf

    """Pixbuf for open expander"""
    pixbuf_expander_open = None  # type: GdkPixbuf

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Render detail to pass to the theme engine"""
    stock_detail = None  # type: str

    """The stock ID of the stock icon to render"""
    stock_id = None  # type: str

    """The GtkIconSize value that specifies the size of the rendered icon"""
    stock_size = None  # type: guint

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererProgress:
    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Orientation and growth direction of the progress bar"""
    orientation = None  # type: GtkProgressBarOrientation

    """Set this to positive values to indicate that some progress is made, but you don't know how much."""
    pulse = None  # type: gint

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Text on the progress bar"""
    text = None  # type: str

    """The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    text_xalign = None  # type: gfloat

    """The vertical text alignment, from 0 (top) to 1 (bottom)."""
    text_yalign = None  # type: gfloat

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Value of the progress bar"""
    value = None  # type: gint

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererSpin:
    """The adjustment that holds the value of the spinbutton."""
    adjustment = None  # type: GtkAdjustment

    """Whether this tag affects the alignment mode"""
    align_set = None  # type: bool

    """How to align the lines"""
    alignment = None  # type: PangoAlignment

    """A list of style attributes to apply to the text of the renderer"""
    attributes = None  # type: PangoAttrList

    """Background color as a string"""
    background = None  # type: str

    """Background color as a GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """The acceleration rate when you hold down a button"""
    climb_rate = None  # type: gdouble

    """The number of decimal places to display"""
    digits = None  # type: guint

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """Whether this tag affects text editability"""
    editable_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """Whether this tag affects the ellipsize mode"""
    ellipsize_set = None  # type: bool

    """Name of the font family, e.g. Sans, Helvetica, Times, Monospace"""
    family = None  # type: str

    """Whether this tag affects the font family"""
    family_set = None  # type: bool

    """Font description as a string, e.g. "Sans Italic 12""""
    font = None  # type: str

    """Font description as a PangoFontDescription struct"""
    font_desc = None  # type: PangoFontDescription

    """Foreground color as a string"""
    foreground = None  # type: str

    """Foreground color as a GdkColor"""
    foreground_gdk = None  # type: GdkColor

    """Whether this tag affects the foreground color"""
    foreground_set = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it"""
    language = None  # type: str

    """Whether this tag affects the language the text is rendered as"""
    language_set = None  # type: bool

    """Marked up text to render"""
    markup = None  # type: str

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Offset of text above the baseline (below the baseline if rise is negative)"""
    rise = None  # type: gint

    """Whether this tag affects the rise"""
    rise_set = None  # type: bool

    """Font scaling factor"""
    scale = None  # type: gdouble

    """Whether this tag scales the font size by a factor"""
    scale_set = None  # type: bool

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Whether or not to keep all text in a single paragraph"""
    single_paragraph_mode = None  # type: bool

    """Font size"""
    size = None  # type: gint

    """Font size in points"""
    size_points = None  # type: gdouble

    """Whether this tag affects the font size"""
    size_set = None  # type: bool

    """Font stretch"""
    stretch = None  # type: PangoStretch

    """Whether this tag affects the font stretch"""
    stretch_set = None  # type: bool

    """Whether to strike through the text"""
    strikethrough = None  # type: bool

    """Whether this tag affects strikethrough"""
    strikethrough_set = None  # type: bool

    """Font style"""
    style = None  # type: PangoStyle

    """Whether this tag affects the font style"""
    style_set = None  # type: bool

    """Text to render"""
    text = None  # type: str

    """Style of underline for this text"""
    underline = None  # type: PangoUnderline

    """Whether this tag affects underlining"""
    underline_set = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Font variant"""
    variant = None  # type: PangoVariant

    """Whether this tag affects the font variant"""
    variant_set = None  # type: bool

    """Display the cell"""
    visible = None  # type: bool

    """Font weight"""
    weight = None  # type: gint

    """Whether this tag affects the font weight"""
    weight_set = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string"""
    wrap_mode = None  # type: PangoWrapMode

    """The width at which the text is wrapped"""
    wrap_width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def edited(self, arg_1: gchararray, arg_2: gchararray) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererSpinner:
    """Whether the spinner is active (ie. shown) in the cell"""
    active = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Pulse of the spinner"""
    pulse = None  # type: guint

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """The GtkIconSize value that specifies the size of the rendered spinner"""
    size = None  # type: GtkIconSize

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererText:
    """Whether this tag affects the alignment mode"""
    align_set = None  # type: bool

    """How to align the lines"""
    alignment = None  # type: PangoAlignment

    """A list of style attributes to apply to the text of the renderer"""
    attributes = None  # type: PangoAttrList

    """Background color as a string"""
    background = None  # type: str

    """Background color as a GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """Whether this tag affects text editability"""
    editable_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """Whether this tag affects the ellipsize mode"""
    ellipsize_set = None  # type: bool

    """Name of the font family, e.g. Sans, Helvetica, Times, Monospace"""
    family = None  # type: str

    """Whether this tag affects the font family"""
    family_set = None  # type: bool

    """Font description as a string, e.g. "Sans Italic 12""""
    font = None  # type: str

    """Font description as a PangoFontDescription struct"""
    font_desc = None  # type: PangoFontDescription

    """Foreground color as a string"""
    foreground = None  # type: str

    """Foreground color as a GdkColor"""
    foreground_gdk = None  # type: GdkColor

    """Whether this tag affects the foreground color"""
    foreground_set = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it"""
    language = None  # type: str

    """Whether this tag affects the language the text is rendered as"""
    language_set = None  # type: bool

    """Marked up text to render"""
    markup = None  # type: str

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Offset of text above the baseline (below the baseline if rise is negative)"""
    rise = None  # type: gint

    """Whether this tag affects the rise"""
    rise_set = None  # type: bool

    """Font scaling factor"""
    scale = None  # type: gdouble

    """Whether this tag scales the font size by a factor"""
    scale_set = None  # type: bool

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Whether or not to keep all text in a single paragraph"""
    single_paragraph_mode = None  # type: bool

    """Font size"""
    size = None  # type: gint

    """Font size in points"""
    size_points = None  # type: gdouble

    """Whether this tag affects the font size"""
    size_set = None  # type: bool

    """Font stretch"""
    stretch = None  # type: PangoStretch

    """Whether this tag affects the font stretch"""
    stretch_set = None  # type: bool

    """Whether to strike through the text"""
    strikethrough = None  # type: bool

    """Whether this tag affects strikethrough"""
    strikethrough_set = None  # type: bool

    """Font style"""
    style = None  # type: PangoStyle

    """Whether this tag affects the font style"""
    style_set = None  # type: bool

    """Text to render"""
    text = None  # type: str

    """Style of underline for this text"""
    underline = None  # type: PangoUnderline

    """Whether this tag affects underlining"""
    underline_set = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Font variant"""
    variant = None  # type: PangoVariant

    """Whether this tag affects the font variant"""
    variant_set = None  # type: bool

    """Display the cell"""
    visible = None  # type: bool

    """Font weight"""
    weight = None  # type: gint

    """Whether this tag affects the font weight"""
    weight_set = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string"""
    wrap_mode = None  # type: PangoWrapMode

    """The width at which the text is wrapped"""
    wrap_width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def edited(self, arg_1: gchararray, arg_2: gchararray) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class CellRendererToggle:
    """The toggle button can be activated"""
    activatable = None  # type: bool

    """The toggle state of the button"""
    active = None  # type: bool

    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """The inconsistent state of the button"""
    inconsistent = None  # type: bool

    """Size of check or radio indicator"""
    indicator_size = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Draw the toggle button as a radio button"""
    radio = None  # type: bool

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def toggled(self, arg_1: gchararray) -> None: ...


class CellView:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Background color as a string"""
    background = None  # type: str

    """Background color as a GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The model for cell view"""
    model = None  # type: GtkTreeModel

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CheckButton:
    """If the toggle button should be pressed in or not"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """If the toggle part of the button is displayed"""
    draw_indicator = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """If the toggle button is in an "in between" state"""
    inconsistent = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggled(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class CheckMenuItem:
    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the menu item is checked"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the menu item looks like a radio menu item"""
    draw_as_radio = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether to display an "inconsistent" state"""
    inconsistent = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def toggled(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Clipboard:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def owner_change(self, arg_1: GdkEvent) -> None: ...


class ColorButton:
    """The selected opacity value (0 fully transparent, 65535 fully opaque)"""
    alpha = None  # type: guint

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """The selected color"""
    color = None  # type: GdkColor

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the color selection dialog"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether or not to give the color an alpha value"""
    use_alpha = None  # type: bool

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def color_set(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ColorSelection:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The current opacity value (0 fully transparent, 65535 fully opaque)"""
    current_alpha = None  # type: guint

    """The current color"""
    current_color = None  # type: GdkColor

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether the color selector should allow setting opacity"""
    has_opacity_control = None  # type: bool

    """Whether a palette should be used"""
    has_palette = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def color_changed(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ColorSelectionDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """The cancel button of the dialog."""
    cancel_button = None  # type: GtkWidget

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """The color selection embedded in the dialog."""
    color_selection = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The help button of the dialog."""
    help_button = None  # type: GtkWidget

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The OK button of the dialog."""
    ok_button = None  # type: GtkWidget

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Combo:
    """Whether an empty value may be entered in this field"""
    allow_empty = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether list item matching is case sensitive"""
    case_sensitive = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the arrow keys move through the list of items"""
    enable_arrow_keys = None  # type: bool

    """Obsolete property, ignored"""
    enable_arrows_always = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether entered values must already be present in the list"""
    value_in_list = None  # type: bool

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ComboBox:
    """The item which is currently active"""
    active = None  # type: gint

    """Whether dropdowns should have a tearoff menu item"""
    add_tearoffs = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the dropdown button is sensitive when the model is empty"""
    button_sensitivity = None  # type: GtkSensitivityType

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """TreeModel column containing the column span values"""
    column_span_column = None  # type: gint

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The column in the combo box's model to associate with strings from the entry if the combo was created with #GtkComboBox:has-entry = %TRUE"""
    entry_text_column = None  # type: gint

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the combo box grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether combo box has an entry"""
    has_entry = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether the combo box draws a frame around the child"""
    has_frame = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The model for the combo box"""
    model = None  # type: GtkTreeModel

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Whether the combo's dropdown is shown"""
    popup_shown = None  # type: bool

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """TreeModel column containing the row span values"""
    row_span_column = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A title that may be displayed by the window manager when the popup is torn-off"""
    tearoff_title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Wrap width for laying out the items in a grid"""
    wrap_width = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def changed(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def editing_done(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_active(self, arg_1: GtkScrollType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popdown(self) -> bool: ...
    def popup(self) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def remove_widget(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ComboBoxEntry:
    """The item which is currently active"""
    active = None  # type: gint

    """Whether dropdowns should have a tearoff menu item"""
    add_tearoffs = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the dropdown button is sensitive when the model is empty"""
    button_sensitivity = None  # type: GtkSensitivityType

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """TreeModel column containing the column span values"""
    column_span_column = None  # type: gint

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The column in the combo box's model to associate with strings from the entry if the combo was created with #GtkComboBox:has-entry = %TRUE"""
    entry_text_column = None  # type: gint

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the combo box grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether combo box has an entry"""
    has_entry = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether the combo box draws a frame around the child"""
    has_frame = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The model for the combo box"""
    model = None  # type: GtkTreeModel

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Whether the combo's dropdown is shown"""
    popup_shown = None  # type: bool

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """TreeModel column containing the row span values"""
    row_span_column = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A title that may be displayed by the window manager when the popup is torn-off"""
    tearoff_title = None  # type: str

    """A column in the data source model to get the strings from"""
    text_column = None  # type: gint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Wrap width for laying out the items in a grid"""
    wrap_width = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def changed(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def editing_done(self) -> None: ...
    def editing_done(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_active(self, arg_1: GtkScrollType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popdown(self) -> bool: ...
    def popup(self) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def remove_widget(self) -> None: ...
    def remove_widget(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Container:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Curve:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Is this curve linear, spline interpolated, or free-form"""
    curve_type = None  # type: GtkCurveType

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Maximum possible X value"""
    max_x = None  # type: gfloat

    """Maximum possible value for Y"""
    max_y = None  # type: gfloat

    """Minimum possible value for X"""
    min_x = None  # type: gfloat

    """Minimum possible value for Y"""
    min_y = None  # type: gfloat

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def curve_type_changed(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Dialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class DrawingArea:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Editable:


    def __init__(self): ...


class Entry:
    """Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed"""
    activates_default = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Text buffer object which actually stores entry text"""
    buffer = None  # type: GtkEntryBuffer

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether password entries will show a warning when Caps Lock is on"""
    caps_lock_warning = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The current position of the insertion cursor in chars"""
    cursor_position = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the entry contents can be edited"""
    editable = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """FALSE removes outside bevel from entry"""
    has_frame = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Which IM module should be used"""
    im_module = None  # type: str

    """Border between text and frame. Overrides the inner-border style property"""
    inner_border = None  # type: GtkBorder

    """The character to use when masking entry contents (in "password mode")"""
    invisible_char = None  # type: guint

    """Whether the invisible char has been set"""
    invisible_char_set = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Maximum number of characters for this entry. Zero if no maximum"""
    max_length = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """Whether new text overwrites existing text"""
    overwrite_mode = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Whether the primary icon is activatable"""
    primary_icon_activatable = None  # type: bool

    """GIcon for primary icon"""
    primary_icon_gicon = None  # type: GIcon

    """Icon name for primary icon"""
    primary_icon_name = None  # type: str

    """Primary pixbuf for the entry"""
    primary_icon_pixbuf = None  # type: GdkPixbuf

    """Whether the primary icon is sensitive"""
    primary_icon_sensitive = None  # type: bool

    """Stock ID for primary icon"""
    primary_icon_stock = None  # type: str

    """The representation being used for primary icon"""
    primary_icon_storage_type = None  # type: GtkImageType

    """The contents of the tooltip on the primary icon"""
    primary_icon_tooltip_markup = None  # type: str

    """The contents of the tooltip on the primary icon"""
    primary_icon_tooltip_text = None  # type: str

    """The current fraction of the task that's been completed"""
    progress_fraction = None  # type: gdouble

    """The fraction of total entry width to move the progress bouncing block for each call to gtk_entry_progress_pulse()"""
    progress_pulse_step = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Number of pixels of the entry scrolled off the screen to the left"""
    scroll_offset = None  # type: gint

    """Whether the secondary icon is activatable"""
    secondary_icon_activatable = None  # type: bool

    """GIcon for secondary icon"""
    secondary_icon_gicon = None  # type: GIcon

    """Icon name for secondary icon"""
    secondary_icon_name = None  # type: str

    """Secondary pixbuf for the entry"""
    secondary_icon_pixbuf = None  # type: GdkPixbuf

    """Whether the secondary icon is sensitive"""
    secondary_icon_sensitive = None  # type: bool

    """Stock ID for secondary icon"""
    secondary_icon_stock = None  # type: str

    """The representation being used for secondary icon"""
    secondary_icon_storage_type = None  # type: GtkImageType

    """The contents of the tooltip on the secondary icon"""
    secondary_icon_tooltip_markup = None  # type: str

    """The contents of the tooltip on the secondary icon"""
    secondary_icon_tooltip_text = None  # type: str

    """The position of the opposite end of the selection from the cursor in chars"""
    selection_bound = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Which kind of shadow to draw around the entry when has-frame is set"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the entry"""
    text = None  # type: str

    """Length of the text currently in the entry"""
    text_length = None  # type: guint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether to truncate multiline pastes to one line."""
    truncate_multiline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """FALSE displays the "invisible char" instead of the actual text (password mode)"""
    visibility = None  # type: bool

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Number of characters to leave space for in the entry"""
    width_chars = None  # type: gint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def backspace(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def changed(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def cut_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_from_cursor(self, arg_1: GtkDeleteType, arg_2: gint) -> None: ...
    def delete_text(self, arg_1: gint, arg_2: gint) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def editing_done(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def icon_press(self, arg_1: GtkEntryIconPosition, arg_2: GdkEvent) -> None: ...
    def icon_release(self, arg_1: GtkEntryIconPosition, arg_2: GdkEvent) -> None: ...
    def insert_at_cursor(self, arg_1: gchararray) -> None: ...
    def insert_text(self, arg_1: gchararray, arg_2: gint, arg_3: gpointer) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint, arg_3: gboolean) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def paste_clipboard(self) -> None: ...
    def populate_popup(self, arg_1: GtkMenu) -> None: ...
    def popup_menu(self) -> bool: ...
    def preedit_changed(self, arg_1: gchararray) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove_widget(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_overwrite(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class EntryBuffer:
    """Length of the text currently in the buffer"""
    length = None  # type: guint

    """Maximum number of characters for this entry. Zero if no maximum"""
    max_length = None  # type: gint

    """The contents of the buffer"""
    text = None  # type: str

    def __init__(self): ...
    def deleted_text(self, arg_1: guint, arg_2: guint) -> None: ...
    def inserted_text(self, arg_1: guint, arg_2: gchararray, arg_3: guint) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class EntryCompletion:
    """Whether the common prefix should be inserted automatically"""
    inline_completion = None  # type: bool

    """Your description here"""
    inline_selection = None  # type: bool

    """Minimum length of the search key in order to look up matches"""
    minimum_key_length = None  # type: gint

    """The model to find matches in"""
    model = None  # type: GtkTreeModel

    """Whether the completions should be shown in a popup window"""
    popup_completion = None  # type: bool

    """If TRUE, the popup window will have the same size as the entry"""
    popup_set_width = None  # type: bool

    """If TRUE, the popup window will appear for a single match."""
    popup_single_match = None  # type: bool

    """The column of the model containing the strings."""
    text_column = None  # type: gint

    def __init__(self): ...
    def action_activated(self, arg_1: gint) -> None: ...
    def cursor_on_match(self, arg_1: GtkTreeModel, arg_2: GtkTreeIter) -> bool: ...
    def insert_prefix(self, arg_1: gchararray) -> bool: ...
    def match_selected(self, arg_1: GtkTreeModel, arg_2: GtkTreeIter) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...


class EventBox:
    """Whether the event-trapping window of the eventbox is above the window of the child widget as opposed to below it."""
    above_child = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the event box is visible, as opposed to invisible and only used to trap events."""
    visible_window = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Expander:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """Whether the expander has been opened to reveal the child widget"""
    expanded = None  # type: bool

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the expander's label"""
    label = None  # type: str

    """Whether the label widget should fill all available horizontal space"""
    label_fill = None  # type: bool

    """A widget to display in place of the usual expander label"""
    label_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Space to put between the label and the child"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The text of the label includes XML markup. See pango_parse_markup()"""
    use_markup = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FileChooser:


    def __init__(self): ...


class FileChooserButton:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The file chooser dialog to use."""
    dialog = None  # type: GtkFileChooser

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the file chooser dialog."""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """The desired width of the button widget, in characters."""
    width_chars = None  # type: gint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def confirm_overwrite(self) -> GtkFileChooserConfirmation: ...
    def current_folder_changed(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def file_activated(self) -> None: ...
    def file_set(self) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def update_preview(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FileChooserDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def confirm_overwrite(self) -> GtkFileChooserConfirmation: ...
    def current_folder_changed(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def file_activated(self) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def update_preview(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FileChooserWidget:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def confirm_overwrite(self) -> GtkFileChooserConfirmation: ...
    def current_folder_changed(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def default_size_changed(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def file_activated(self) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response_requested(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def update_preview(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FileFilter:
    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    def __init__(self): ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class FileSelection:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The currently selected filename"""
    filename = None  # type: str

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether to allow multiple files to be selected"""
    select_multiple = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether buttons for creating/manipulating files should be displayed"""
    show_fileops = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Fixed:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FontButton:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """The name of the selected font"""
    font_name = None  # type: str

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether selected font size is shown in the label"""
    show_size = None  # type: bool

    """Whether the selected font style is shown in the label"""
    show_style = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the font selection dialog"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether the label is drawn in the selected font"""
    use_font = None  # type: bool

    """Whether the label is drawn with the selected font size"""
    use_size = None  # type: bool

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def font_set(self) -> None: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FontSelection:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The GdkFont that is currently selected"""
    font = None  # type: GdkFont

    """The string that represents this font"""
    font_name = None  # type: str

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """The text to display in order to demonstrate the selected font"""
    preview_text = None  # type: str

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class FontSelectionDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Frame:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the frame's label"""
    label = None  # type: str

    """A widget to display in place of the usual frame label"""
    label_widget = None  # type: GtkWidget

    """The horizontal alignment of the label"""
    label_xalign = None  # type: gfloat

    """The vertical alignment of the label"""
    label_yalign = None  # type: gfloat

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Deprecated property, use shadow_type instead"""
    shadow = None  # type: GtkShadowType

    """Appearance of the frame border"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class GammaCurve:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class GdkAtomType:


    def __init__(self): ...


class GenericCellRenderer:
    """Cell background color as a string"""
    cell_background = None  # type: str

    """Cell background color as a GdkColor"""
    cell_background_gdk = None  # type: GdkColor

    """Whether this tag affects the cell background color"""
    cell_background_set = None  # type: bool

    """Whether the cell renderer is currently in editing mode"""
    editing = None  # type: bool

    """The fixed height"""
    height = None  # type: gint

    """Row is an expander row, and is expanded"""
    is_expanded = None  # type: bool

    """Row has children"""
    is_expander = None  # type: bool

    """Editable mode of the CellRenderer"""
    mode = None  # type: GtkCellRendererMode

    """Display the cell sensitive"""
    sensitive = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Display the cell"""
    visible = None  # type: bool

    """The fixed width"""
    width = None  # type: gint

    """The x-align"""
    xalign = None  # type: gfloat

    """The xpad"""
    xpad = None  # type: guint

    """The y-align"""
    yalign = None  # type: gfloat

    """The ypad"""
    ypad = None  # type: guint

    def __init__(self): ...
    def destroy(self) -> None: ...
    def editing_canceled(self) -> None: ...
    def editing_started(self, arg_1: GtkCellEditable, arg_2: gchararray) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class GenericTreeModel:
    """Enable referencing iterator objects (this will cause a memory leak or at least a reference counting leak). You might need it though, if you return newly created objects."""
    leak_references = None  # type: bool

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def row_changed(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_deleted(self, arg_1: GtkTreePath) -> None: ...
    def row_has_child_toggled(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_inserted(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def rows_reordered(self, arg_1: GtkTreePath, arg_2: GtkTreeIter, arg_3: gpointer) -> None: ...


class HBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HButtonBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """How to lay out the buttons in the box. Possible values are: default, spread, edge, start and end"""
    layout_style = None  # type: GtkButtonBoxStyle

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HPaned:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Largest possible value for the "position" property"""
    max_position = None  # type: gint

    """Smallest possible value for the "position" property"""
    min_position = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of paned separator in pixels (0 means all the way to the left/top)"""
    position = None  # type: gint

    """TRUE if the Position property should be used"""
    position_set = None  # type: bool

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def accept_position(self) -> bool: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel_position(self) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_child_focus(self, arg_1: gboolean) -> bool: ...
    def cycle_handle_focus(self, arg_1: gboolean) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_handle(self, arg_1: GtkScrollType) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_handle_focus(self) -> bool: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HRuler:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Lower limit of ruler"""
    lower = None  # type: gdouble

    """Maximum size of the ruler"""
    max_size = None  # type: gdouble

    """The metric used for the ruler"""
    metric = None  # type: GtkMetricType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of mark on the ruler"""
    position = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Upper limit of ruler"""
    upper = None  # type: gdouble

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HScale:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The number of decimal places that are displayed in the value"""
    digits = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the current value is displayed as a string next to the slider"""
    draw_value = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The position in which the current value is displayed"""
    value_pos = None  # type: GtkPositionType

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def format_value(self, arg_1: gdouble) -> str: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HScrollbar:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HSeparator:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class HandleBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """A boolean value indicating whether the handlebox's child is attached or detached."""
    child_detached = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Position of the handle relative to the child widget"""
    handle_position = None  # type: GtkPositionType

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Deprecated property, use shadow_type instead"""
    shadow = None  # type: GtkShadowType

    """Appearance of the shadow that surrounds the container"""
    shadow_type = None  # type: GtkShadowType

    """Side of the handlebox that's lined up with the docking point to dock the handlebox"""
    snap_edge = None  # type: GtkPositionType

    """Whether to use the value from the snap_edge property or a value derived from handle_position"""
    snap_edge_set = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_attached(self, arg_1: GtkWidget) -> None: ...
    def child_detached(self, arg_1: GtkWidget) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class IMContext:


    def __init__(self): ...
    def commit(self, arg_1: gchararray) -> None: ...
    def delete_surrounding(self, arg_1: gint, arg_2: gint) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def preedit_changed(self) -> None: ...
    def preedit_end(self) -> None: ...
    def preedit_start(self) -> None: ...
    def retrieve_surrounding(self) -> bool: ...


class IMContextSimple:


    def __init__(self): ...
    def commit(self, arg_1: gchararray) -> None: ...
    def delete_surrounding(self, arg_1: gint, arg_2: gint) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def preedit_changed(self) -> None: ...
    def preedit_end(self) -> None: ...
    def preedit_start(self) -> None: ...
    def retrieve_surrounding(self) -> bool: ...


class IMMulticontext:


    def __init__(self): ...
    def commit(self, arg_1: gchararray) -> None: ...
    def delete_surrounding(self, arg_1: gint, arg_2: gint) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def preedit_changed(self) -> None: ...
    def preedit_end(self) -> None: ...
    def preedit_start(self) -> None: ...
    def retrieve_surrounding(self) -> bool: ...


class IconFactory:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class IconInfo:


    def __init__(self): ...


class IconSet:


    def __init__(self): ...


class IconSource:


    def __init__(self): ...


class IconTheme:


    def __init__(self): ...
    def changed(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class IconView:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Space which is inserted between grid columns"""
    column_spacing = None  # type: gint

    """Number of columns to display"""
    columns = None  # type: gint

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """How the text and icon of each item are positioned relative to each other"""
    item_orientation = None  # type: GtkOrientation

    """Padding around icon view items"""
    item_padding = None  # type: gint

    """The width used for each item"""
    item_width = None  # type: gint

    """Space which is inserted at the edges of the icon view"""
    margin = None  # type: gint

    """Model column used to retrieve the text if using Pango markup"""
    markup_column = None  # type: gint

    """The model for the icon view"""
    model = None  # type: GtkTreeModel

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """How the text and icon of each item are positioned relative to each other"""
    orientation = None  # type: GtkOrientation

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Model column used to retrieve the icon pixbuf from"""
    pixbuf_column = None  # type: gint

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """View is reorderable"""
    reorderable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Space which is inserted between grid rows"""
    row_spacing = None  # type: gint

    """The selection mode"""
    selection_mode = None  # type: GtkSelectionMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Space which is inserted between cells of an item"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """Model column used to retrieve the text from"""
    text_column = None  # type: gint

    """The column in the model containing the tooltip texts for the items"""
    tooltip_column = None  # type: gint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_cursor_item(self) -> bool: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def item_activated(self, arg_1: GtkTreePath) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select_all(self) -> None: ...
    def select_cursor_item(self) -> None: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_cursor_item(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_all(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Image:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Filename to load and display"""
    file = None  # type: str

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Icon set to display"""
    icon_set = None  # type: GtkIconSet

    """Symbolic size to use for stock icon, icon set or named icon"""
    icon_size = None  # type: gint

    """A GdkImage to display"""
    image = None  # type: GdkImage

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Mask bitmap to use with GdkImage or GdkPixmap"""
    mask = None  # type: GdkPixmap

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """A GdkPixbuf to display"""
    pixbuf = None  # type: GdkPixbuf

    """GdkPixbufAnimation to display"""
    pixbuf_animation = None  # type: GdkPixbufAnimation

    """Pixel size to use for named icon"""
    pixel_size = None  # type: gint

    """A GdkPixmap to display"""
    pixmap = None  # type: GdkPixmap

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Stock ID for a stock image to display"""
    stock = None  # type: str

    """The representation being used for image data"""
    storage_type = None  # type: GtkImageType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ImageMenuItem:
    """The Accel Group to use for stock accelerator keys"""
    accel_group = None  # type: GtkAccelGroup

    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the image will always be shown"""
    always_show_image = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the menu text"""
    image = None  # type: GtkWidget

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether to use the label text to create a stock menu item"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class InfoBar:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The type of message"""
    message_type = None  # type: GtkMessageType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class InputDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def disable_device(self, arg_1: GdkDevice) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enable_device(self, arg_1: GdkDevice) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Invisible:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Item:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ItemFactory:
    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    def __init__(self): ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class Label:
    """Angle at which the label is rotated"""
    angle = None  # type: gdouble

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """A list of style attributes to apply to the text of the label"""
    attributes = None  # type: PangoAttrList

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The current position of the insertion cursor in chars"""
    cursor_position = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The preferred place to ellipsize the string, if the label does not have enough room to display the entire string"""
    ellipsize = None  # type: PangoEllipsizeMode

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that"""
    justify = None  # type: GtkJustification

    """The text of the label"""
    label = None  # type: str

    """The desired maximum width of the label, in characters"""
    max_width_chars = None  # type: gint

    """The mnemonic accelerator key for this label"""
    mnemonic_keyval = None  # type: guint

    """The widget to be activated when the label's mnemonic key is pressed"""
    mnemonic_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """A string with _ characters in positions correspond to characters in the text to underline"""
    pattern = None  # type: str

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the label text can be selected with the mouse"""
    selectable = None  # type: bool

    """The position of the opposite end of the selection from the cursor in chars"""
    selection_bound = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the label is in single line mode"""
    single_line_mode = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether visited links should be tracked"""
    track_visited_links = None  # type: bool

    """The text of the label includes XML markup. See pango_parse_markup()"""
    use_markup = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """The desired width of the label, in characters"""
    width_chars = None  # type: gint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """If set, wrap lines if the text becomes too wide"""
    wrap = None  # type: bool

    """If wrap is set, controls how linewrapping is done"""
    wrap_mode = None  # type: PangoWrapMode

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current_link(self) -> None: ...
    def activate_link(self, arg_1: gchararray) -> bool: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint, arg_3: gboolean) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def populate_popup(self, arg_1: GtkMenu) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Layout:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The GtkAdjustment for the horizontal position"""
    hadjustment = None  # type: GtkAdjustment

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """The height of the layout"""
    height = None  # type: guint

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The GtkAdjustment for the vertical position"""
    vadjustment = None  # type: GtkAdjustment

    """Whether the widget is visible"""
    visible = None  # type: bool

    """The width of the layout"""
    width = None  # type: guint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class LinkButton:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The URI bound to this button"""
    uri = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether this link has been visited."""
    visited = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class List:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    selection_mode = None  # type: GtkSelectionMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select_child(self, arg_1: GtkWidget) -> None: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_child(self, arg_1: GtkWidget) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ListItem:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def end_selection(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def extend_selection(self, arg_1: GtkScrollType, arg_2: gfloat, arg_3: gboolean) -> None: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def scroll_horizontal(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def scroll_vertical(self, arg_1: GtkScrollType, arg_2: gfloat) -> None: ...
    def select(self) -> None: ...
    def select_all(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def start_selection(self) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_add_mode(self) -> None: ...
    def toggle_focus_row(self) -> None: ...
    def undo_selection(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_all(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ListStore:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def row_changed(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_deleted(self, arg_1: GtkTreePath) -> None: ...
    def row_has_child_toggled(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_inserted(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def rows_reordered(self, arg_1: GtkTreePath, arg_2: GtkTreeIter, arg_3: gpointer) -> None: ...
    def sort_column_changed(self) -> None: ...


class Menu:
    """The accel group holding accelerators for the menu"""
    accel_group = None  # type: GtkAccelGroup

    """An accel path used to conveniently construct accel paths of child items"""
    accel_path = None  # type: str

    """The currently selected menu item"""
    active = None  # type: gint

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The widget the menu is attached to"""
    attach_widget = None  # type: GtkWidget

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The monitor the menu will be popped up on"""
    monitor = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """A boolean that indicates whether the menu reserves space for toggles and icons"""
    reserve_toggle_size = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A boolean that determines whether the menu grabs the keyboard focus"""
    take_focus = None  # type: bool

    """A boolean that indicates whether the menu is torn-off"""
    tearoff_state = None  # type: bool

    """A title that may be displayed by the window manager when this menu is torn-off"""
    tearoff_title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current(self, arg_1: gboolean) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_focus(self, arg_1: GtkDirectionType) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def deactivate(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert(self, arg_1: GtkWidget, arg_2: gint) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_current(self, arg_1: GtkMenuDirectionType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_scroll(self, arg_1: GtkScrollType) -> None: ...
    def move_selected(self, arg_1: gint) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_done(self) -> None: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MenuBar:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """The child pack direction of the menubar"""
    child_pack_direction = None  # type: GtkPackDirection

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The pack direction of the menubar"""
    pack_direction = None  # type: GtkPackDirection

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A boolean that determines whether the menu grabs the keyboard focus"""
    take_focus = None  # type: bool

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current(self, arg_1: gboolean) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_focus(self, arg_1: GtkDirectionType) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def deactivate(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert(self, arg_1: GtkWidget, arg_2: gint) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_current(self, arg_1: GtkMenuDirectionType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_selected(self, arg_1: gint) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_done(self) -> None: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MenuItem:
    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MenuShell:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A boolean that determines whether the menu grabs the keyboard focus"""
    take_focus = None  # type: bool

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current(self, arg_1: gboolean) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_focus(self, arg_1: GtkDirectionType) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def deactivate(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert(self, arg_1: GtkWidget, arg_2: gint) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_current(self, arg_1: GtkMenuDirectionType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_selected(self, arg_1: gint) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_done(self) -> None: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MenuToolButton:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The name of the themed icon displayed on the item"""
    icon_name = None  # type: str

    """Icon widget to display in the item"""
    icon_widget = None  # type: GtkWidget

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """Text to show in the item."""
    label = None  # type: str

    """Widget to use as the item label"""
    label_widget = None  # type: GtkWidget

    """The dropdown menu"""
    menu = None  # type: GtkMenu

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The stock icon displayed on the item"""
    stock_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def show_menu(self) -> None: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MessageDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """The buttons shown in the message dialog"""
    buttons = None  # type: GtkButtonsType

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """The image"""
    image = None  # type: GtkWidget

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """GtkVBox that holds the dialog's primary and secondary labels"""
    message_area = None  # type: GtkWidget

    """The type of message"""
    message_type = None  # type: GtkMessageType

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """The secondary text of the message dialog"""
    secondary_text = None  # type: str

    """The secondary text includes Pango markup."""
    secondary_use_markup = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The primary text of the message dialog"""
    text = None  # type: str

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """The primary text of the title includes Pango markup."""
    use_markup = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Misc:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class MountOperation:
    """Whether to use an anonymous user"""
    anonymous = None  # type: bool

    """The users choice"""
    choice = None  # type: gint

    """The domain of the mount operation"""
    domain = None  # type: str

    """Are we showing a dialog"""
    is_showing = None  # type: bool

    """Whether to unlock a TCRYPT hidden volume. See https://www.veracrypt.fr/en/Hidden%20Volume.html."""
    is_tcrypt_hidden_volume = None  # type: bool

    """Whether to unlock a TCRYPT system volume. Only supported for unlocking Windows system volumes. See https://www.veracrypt.fr/en/System%20Encryption.html."""
    is_tcrypt_system_volume = None  # type: bool

    """The parent window"""
    parent = None  # type: GtkWindow

    """The password"""
    password = None  # type: str

    """How passwords should be saved"""
    password_save = None  # type: GPasswordSave

    """The VeraCrypt PIM value"""
    pim = None  # type: guint

    """The screen where this window will be displayed."""
    screen = None  # type: GdkScreen

    """The user name"""
    username = None  # type: str

    def __init__(self): ...
    def aborted(self) -> None: ...
    def ask_password(self, arg_1: gchararray, arg_2: gchararray, arg_3: gchararray, arg_4: GAskPasswordFlags) -> None: ...
    def ask_question(self, arg_1: gchararray, arg_2: GStrv) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def reply(self, arg_1: GMountOperationResult) -> None: ...
    def show_processes(self, arg_1: gchararray, arg_2: GArray, arg_3: GStrv) -> None: ...
    def show_unmount_progress(self, arg_1: gchararray, arg_2: gint64, arg_3: gint64) -> None: ...


class Notebook:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """If TRUE, pressing the right mouse button on the notebook pops up a menu that you can use to go to a page"""
    enable_popup = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Group for tabs drag and drop"""
    group = None  # type: gpointer

    """Group ID for tabs drag and drop"""
    group_id = None  # type: gint

    """Group name for tabs drag and drop"""
    group_name = None  # type: str

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether tabs should have homogeneous sizes"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The index of the current page"""
    page = None  # type: gint

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """If TRUE, scroll arrows are added if there are too many tabs to fit"""
    scrollable = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the border should be shown or not"""
    show_border = None  # type: bool

    """Whether tabs should be shown or not"""
    show_tabs = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """Width of the border around the tab labels"""
    tab_border = None  # type: guint

    """Width of the horizontal border of tab labels"""
    tab_hborder = None  # type: guint

    """Which side of the notebook holds the tabs"""
    tab_pos = None  # type: GtkPositionType

    """Width of the vertical border of tab labels"""
    tab_vborder = None  # type: guint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_current_page(self, arg_1: gint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_window(self, arg_1: GtkWidget, arg_2: gint, arg_3: gint) -> GtkNotebook: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_tab(self, arg_1: GtkNotebookTab) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_focus_out(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def page_added(self, arg_1: GtkWidget, arg_2: guint) -> None: ...
    def page_removed(self, arg_1: GtkWidget, arg_2: guint) -> None: ...
    def page_reordered(self, arg_1: GtkWidget, arg_2: guint) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def reorder_tab(self, arg_1: GtkDirectionType, arg_2: gboolean) -> bool: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select_page(self, arg_1: gboolean) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def switch_page(self, arg_1: gpointer, arg_2: guint) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Object:
    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    def __init__(self): ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class OffscreenWindow:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class OldEditable:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    editable = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    text_position = None  # type: gint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def changed(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def cut_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_text(self, arg_1: gint, arg_2: gint) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert_text(self, arg_1: gchararray, arg_2: gint, arg_3: gpointer) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def kill_char(self, arg_1: gint) -> None: ...
    def kill_line(self, arg_1: gint) -> None: ...
    def kill_word(self, arg_1: gint) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: gint, arg_2: gint) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_page(self, arg_1: gint, arg_2: gint) -> None: ...
    def move_to_column(self, arg_1: gint) -> None: ...
    def move_to_row(self, arg_1: gint) -> None: ...
    def move_word(self, arg_1: gint) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def paste_clipboard(self) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_editable(self, arg_1: gboolean) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class OptionMenu:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The menu of options"""
    menu = None  # type: GtkMenu

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def changed(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Orientable:


    def __init__(self): ...


class PageSetup:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class Paned:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Largest possible value for the "position" property"""
    max_position = None  # type: gint

    """Smallest possible value for the "position" property"""
    min_position = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of paned separator in pixels (0 means all the way to the left/top)"""
    position = None  # type: gint

    """TRUE if the Position property should be used"""
    position_set = None  # type: bool

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def accept_position(self) -> bool: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel_position(self) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_child_focus(self, arg_1: gboolean) -> bool: ...
    def cycle_handle_focus(self, arg_1: gboolean) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_handle(self, arg_1: GtkScrollType) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_handle_focus(self) -> bool: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class PaperSize:


    def __init__(self): ...


class Pixmap:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    """The amount of space to add on the left and right of the widget, in pixels"""
    xpad = None  # type: gint

    """The vertical alignment, from 0 (top) to 1 (bottom)"""
    yalign = None  # type: gfloat

    """The amount of space to add on the top and bottom of the widget, in pixels"""
    ypad = None  # type: gint

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Plug:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether or not the plug is embedded"""
    embedded = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """The window of the socket the plug is embedded in"""
    socket_window = None  # type: Window

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def embedded(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Preview:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """Whether the preview widget should take up the entire space it is allocated"""
    expand = None  # type: bool

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class PrintContext:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class PrintOperation:
    """TRUE if print process may run asynchronous."""
    allow_async = None  # type: bool

    """The current page in the document"""
    current_page = None  # type: gint

    """Label for the tab containing custom widgets."""
    custom_tab_label = None  # type: str

    """The GtkPageSetup used by default"""
    default_page_setup = None  # type: GtkPageSetup

    """TRUE if page setup combos are embedded in GtkPrintDialog"""
    embed_page_setup = None  # type: bool

    """Export filename"""
    export_filename = None  # type: str

    """TRUE if a selection exists."""
    has_selection = None  # type: bool

    """A string used for identifying the print job."""
    job_name = None  # type: str

    """The number of pages in the document."""
    n_pages = None  # type: gint

    """The number of pages that will be printed."""
    n_pages_to_print = None  # type: gint

    """The GtkPrintSettings used for initializing the dialog"""
    print_settings = None  # type: GtkPrintSettings

    """TRUE if a progress dialog is shown while printing."""
    show_progress = None  # type: bool

    """The status of the print operation"""
    status = None  # type: GtkPrintStatus

    """A human-readable description of the status"""
    status_string = None  # type: str

    """TRUE if the print operation will support print of selection."""
    support_selection = None  # type: bool

    """TRUE if the print operation will continue to report on the print job status after the print data has been sent to the printer or print server."""
    track_print_status = None  # type: bool

    """The unit in which distances can be measured in the context"""
    unit = None  # type: GtkUnit

    """TRUE if the origin of the context should be at the corner of the page and not the corner of the imageable area"""
    use_full_page = None  # type: bool

    def __init__(self): ...
    def begin_print(self, arg_1: GtkPrintContext) -> None: ...
    def create_custom_widget(self) -> GObject: ...
    def custom_widget_apply(self, arg_1: GtkWidget) -> None: ...
    def done(self, arg_1: GtkPrintOperationResult) -> None: ...
    def draw_page(self, arg_1: GtkPrintContext, arg_2: gint) -> None: ...
    def end_print(self, arg_1: GtkPrintContext) -> None: ...
    def got_page_size(self, arg_1: GtkPrintContext, arg_2: GtkPageSetup) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def paginate(self, arg_1: GtkPrintContext) -> bool: ...
    def preview(self, arg_1: GtkPrintOperationPreview, arg_2: GtkPrintContext, arg_3: GtkWindow) -> bool: ...
    def ready(self, arg_1: GtkPrintContext) -> None: ...
    def request_page_setup(self, arg_1: GtkPrintContext, arg_2: gint, arg_3: GtkPageSetup) -> None: ...
    def status_changed(self) -> None: ...
    def update_custom_widget(self, arg_1: GtkWidget, arg_2: GtkPageSetup, arg_3: GtkPrintSettings) -> None: ...


class PrintOperationPreview:


    def __init__(self): ...


class PrintSettings:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class Progress:
    """If TRUE, the GtkProgress is in activity mode, meaning that it signals something is happening, but not how much of the activity is finished. This is used when you're doing something but don't know how long it will take."""
    activity_mode = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the progress is shown as text."""
    show_text = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    text_xalign = None  # type: gfloat

    """The vertical text alignment, from 0 (top) to 1 (bottom)."""
    text_yalign = None  # type: gfloat

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ProgressBar:
    """The number of blocks which can fit in the progress bar area in activity mode (Deprecated)"""
    activity_blocks = None  # type: guint

    """If TRUE, the GtkProgress is in activity mode, meaning that it signals something is happening, but not how much of the activity is finished. This is used when you're doing something but don't know how long it will take."""
    activity_mode = None  # type: bool

    """The increment used for each iteration in activity mode (Deprecated)"""
    activity_step = None  # type: guint

    """The GtkAdjustment connected to the progress bar (Deprecated)"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Specifies the visual style of the bar in percentage mode (Deprecated)"""
    bar_style = None  # type: GtkProgressBarStyle

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The number of discrete blocks in a progress bar (when shown in the discrete style)"""
    discrete_blocks = None  # type: guint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The preferred place to ellipsize the string, if the progress bar does not have enough room to display the entire string, if at all."""
    ellipsize = None  # type: PangoEllipsizeMode

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fraction of total work that has been completed"""
    fraction = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """Orientation and growth direction of the progress bar"""
    orientation = None  # type: GtkProgressBarOrientation

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """The fraction of total progress to move the bouncing block when pulsed"""
    pulse_step = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the progress is shown as text."""
    show_text = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """Text to be displayed in the progress bar"""
    text = None  # type: str

    """The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    text_xalign = None  # type: gfloat

    """The vertical text alignment, from 0 (top) to 1 (bottom)."""
    text_yalign = None  # type: gfloat

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RadioAction:
    """The GtkActionGroup this GtkAction is associated with, or NULL (for internal use)."""
    action_group = None  # type: GtkActionGroup

    """If the toggle action should be active in or not"""
    active = None  # type: bool

    """Whether the image will always be shown"""
    always_show_image = None  # type: bool

    """The value property of the currently active member of the group to which this action belongs."""
    current_value = None  # type: gint

    """Whether the proxies for this action look like radio action proxies"""
    draw_as_radio = None  # type: bool

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """The radio action whose group this action belongs to."""
    group = None  # type: GtkRadioAction

    """When TRUE, empty menu proxies for this action are hidden."""
    hide_if_empty = None  # type: bool

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode."""
    is_important = None  # type: bool

    """The label used for menu items and buttons that activate this action."""
    label = None  # type: str

    """A unique name for the action."""
    name = None  # type: str

    """Whether the action is enabled."""
    sensitive = None  # type: bool

    """A shorter label that may be used on toolbar buttons."""
    short_label = None  # type: str

    """The stock icon displayed in widgets representing this action."""
    stock_id = None  # type: str

    """A tooltip for this action."""
    tooltip = None  # type: str

    """The value returned by gtk_radio_action_get_current_value() when this action is the current action of its group."""
    value = None  # type: gint

    """Whether the action is visible."""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu."""
    visible_overflown = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    def __init__(self): ...
    def activate(self) -> None: ...
    def changed(self, arg_1: GtkRadioAction) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def toggled(self) -> None: ...


class RadioButton:
    """If the toggle button should be pressed in or not"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """If the toggle part of the button is displayed"""
    draw_indicator = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """The radio button whose group this widget belongs to."""
    group = None  # type: GtkRadioButton

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """If the toggle button is in an "in between" state"""
    inconsistent = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def group_changed(self) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggled(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RadioMenuItem:
    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the menu item is checked"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the menu item looks like a radio menu item"""
    draw_as_radio = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The radio menu item whose group this widget belongs to."""
    group = None  # type: GtkRadioMenuItem

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether to display an "inconsistent" state"""
    inconsistent = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def group_changed(self) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def toggled(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RadioToolButton:
    """If the toggle button should be pressed in or not"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The radio tool button whose group this button belongs to."""
    group = None  # type: GtkRadioToolButton

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The name of the themed icon displayed on the item"""
    icon_name = None  # type: str

    """Icon widget to display in the item"""
    icon_widget = None  # type: GtkWidget

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """Text to show in the item."""
    label = None  # type: str

    """Widget to use as the item label"""
    label_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The stock icon displayed on the item"""
    stock_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggled(self) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Range:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RcStyle:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class RecentAction:
    """The GtkActionGroup this GtkAction is associated with, or NULL (for internal use)."""
    action_group = None  # type: GtkActionGroup

    """Whether the image will always be shown"""
    always_show_image = None  # type: bool

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """When TRUE, empty menu proxies for this action are hidden."""
    hide_if_empty = None  # type: bool

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode."""
    is_important = None  # type: bool

    """The label used for menu items and buttons that activate this action."""
    label = None  # type: str

    """A unique name for the action."""
    name = None  # type: str

    """Whether the action is enabled."""
    sensitive = None  # type: bool

    """A shorter label that may be used on toolbar buttons."""
    short_label = None  # type: str

    """Whether the items should be displayed with a number"""
    show_numbers = None  # type: bool

    """The stock icon displayed in widgets representing this action."""
    stock_id = None  # type: str

    """A tooltip for this action."""
    tooltip = None  # type: str

    """Whether the action is visible."""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu."""
    visible_overflown = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    def __init__(self): ...
    def activate(self) -> None: ...
    def item_activated(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def selection_changed(self) -> None: ...


class RecentChooser:


    def __init__(self): ...


class RecentChooserDialog:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """The dialog has a separator bar above its buttons"""
    has_separator = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def close(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def item_activated(self) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def response(self, arg_1: gint) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RecentChooserMenu:
    """The accel group holding accelerators for the menu"""
    accel_group = None  # type: GtkAccelGroup

    """An accel path used to conveniently construct accel paths of child items"""
    accel_path = None  # type: str

    """The currently selected menu item"""
    active = None  # type: gint

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The widget the menu is attached to"""
    attach_widget = None  # type: GtkWidget

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The monitor the menu will be popped up on"""
    monitor = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """A boolean that indicates whether the menu reserves space for toggles and icons"""
    reserve_toggle_size = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether the items should be displayed with a number"""
    show_numbers = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """A boolean that determines whether the menu grabs the keyboard focus"""
    take_focus = None  # type: bool

    """A boolean that indicates whether the menu is torn-off"""
    tearoff_state = None  # type: bool

    """A title that may be displayed by the window manager when this menu is torn-off"""
    tearoff_title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_current(self, arg_1: gboolean) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel(self) -> None: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_focus(self, arg_1: GtkDirectionType) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def deactivate(self) -> None: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert(self, arg_1: GtkWidget, arg_2: gint) -> None: ...
    def item_activated(self) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_current(self, arg_1: GtkMenuDirectionType) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_scroll(self, arg_1: GtkScrollType) -> None: ...
    def move_selected(self, arg_1: gint) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_done(self) -> None: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RecentChooserWidget:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def item_activated(self) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_changed(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class RecentFilter:
    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    def __init__(self): ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class RecentInfo:


    def __init__(self): ...


class RecentManager:
    """The full path to the file to be used to store and read the list"""
    filename = None  # type: str

    """The maximum number of items to be returned by gtk_recent_manager_get_items()"""
    limit = None  # type: gint

    """The size of the recently used resources list"""
    size = None  # type: gint

    def __init__(self): ...
    def changed(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class Requisition:


    def __init__(self): ...


class Ruler:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Lower limit of ruler"""
    lower = None  # type: gdouble

    """Maximum size of the ruler"""
    max_size = None  # type: gdouble

    """The metric used for the ruler"""
    metric = None  # type: GtkMetricType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of mark on the ruler"""
    position = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Upper limit of ruler"""
    upper = None  # type: gdouble

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Scale:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The number of decimal places that are displayed in the value"""
    digits = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the current value is displayed as a string next to the slider"""
    draw_value = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The position in which the current value is displayed"""
    value_pos = None  # type: GtkPositionType

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def format_value(self, arg_1: gdouble) -> str: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ScaleButton:
    """The GtkAdjustment that contains the current value of this scale button object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """List of icon names"""
    icons = None  # type: GStrv

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The icon size"""
    size = None  # type: GtkIconSize

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The value of the scale"""
    value = None  # type: gdouble

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self, arg_1: gdouble) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Scrollbar:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ScrolledWindow:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The GtkAdjustment for the horizontal position"""
    hadjustment = None  # type: GtkAdjustment

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """When the horizontal scrollbar is displayed"""
    hscrollbar_policy = None  # type: GtkPolicyType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Style of bevel around the contents"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The GtkAdjustment for the vertical position"""
    vadjustment = None  # type: GtkAdjustment

    """Whether the widget is visible"""
    visible = None  # type: bool

    """When the vertical scrollbar is displayed"""
    vscrollbar_policy = None  # type: GtkPolicyType

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Where the contents are located with respect to the scrollbars. This property only takes effect if "window-placement-set" is TRUE."""
    window_placement = None  # type: GtkCornerType

    """Whether "window-placement" should be used to determine the location of the contents with respect to the scrollbars."""
    window_placement_set = None  # type: bool

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_focus_out(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_child(self, arg_1: GtkScrollType, arg_2: gboolean) -> bool: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class SelectionData:


    def __init__(self): ...


class Separator:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class SeparatorMenuItem:
    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class SeparatorToolItem:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the separator is drawn, or just blank"""
    draw = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Settings:
    """A hash table representation of the color scheme."""
    color_hash = None  # type: GHashTable

    """Whether buttons in dialogs should use the alternative button order"""
    gtk_alternative_button_order = None  # type: bool

    """Whether the direction of the sort indicators in list and tree views is inverted compared to the default (where down means ascending)"""
    gtk_alternative_sort_arrows = None  # type: bool

    """Whether mnemonics should be automatically shown and hidden when the user presses the mnemonic activator."""
    gtk_auto_mnemonics = None  # type: bool

    """Whether images should be shown on buttons"""
    gtk_button_images = None  # type: bool

    """Whether menu accelerators can be changed by pressing a key over the menu item"""
    gtk_can_change_accels = None  # type: bool

    """Palette to use in the color selector"""
    gtk_color_palette = None  # type: str

    """A palette of named colors for use in themes"""
    gtk_color_scheme = None  # type: str

    """Whether the cursor should blink"""
    gtk_cursor_blink = None  # type: bool

    """Length of the cursor blink cycle, in milliseconds"""
    gtk_cursor_blink_time = None  # type: gint

    """Time after which the cursor stops blinking, in seconds"""
    gtk_cursor_blink_timeout = None  # type: gint

    """Name of the cursor theme to use, or NULL to use the default theme"""
    gtk_cursor_theme_name = None  # type: str

    """Size to use for cursors, or 0 to use the default size"""
    gtk_cursor_theme_size = None  # type: gint

    """Number of pixels the cursor can move before dragging"""
    gtk_dnd_drag_threshold = None  # type: gint

    """Maximum distance allowed between two clicks for them to be considered a double click (in pixels)"""
    gtk_double_click_distance = None  # type: gint

    """Maximum time allowed between two clicks for them to be considered a double click (in milliseconds)"""
    gtk_double_click_time = None  # type: gint

    """Whether menu items should have accelerators"""
    gtk_enable_accels = None  # type: bool

    """Whether to enable toolkit-wide animations."""
    gtk_enable_animations = None  # type: bool

    """Whether to play any event sounds at all"""
    gtk_enable_event_sounds = None  # type: bool

    """Whether to play event sounds as feedback to user input"""
    gtk_enable_input_feedback_sounds = None  # type: bool

    """Whether labels should have mnemonics"""
    gtk_enable_mnemonics = None  # type: bool

    """Whether tooltips should be shown on widgets"""
    gtk_enable_tooltips = None  # type: bool

    """How long to show the last input character in hidden entries"""
    gtk_entry_password_hint_timeout = None  # type: guint

    """Whether to select the contents of an entry when it is focused"""
    gtk_entry_select_on_focus = None  # type: bool

    """When TRUE, keyboard navigation and other errors will cause a beep"""
    gtk_error_bell = None  # type: bool

    """Name of a icon theme to fall back to"""
    gtk_fallback_icon_theme = None  # type: str

    """Name of the GtkFileChooser backend to use by default"""
    gtk_file_chooser_backend = None  # type: str

    """Name of default font to use"""
    gtk_font_name = None  # type: str

    """Timestamp of current fontconfig configuration"""
    gtk_fontconfig_timestamp = None  # type: guint

    """List of icon sizes (gtk-menu=16,16:gtk-button=20,20..."""
    gtk_icon_sizes = None  # type: str

    """Name of icon theme to use"""
    gtk_icon_theme_name = None  # type: str

    """Which IM module should be used by default"""
    gtk_im_module = None  # type: str

    """How to draw the input method preedit string"""
    gtk_im_preedit_style = None  # type: GtkIMPreeditStyle

    """How to draw the input method statusbar"""
    gtk_im_status_style = None  # type: GtkIMStatusStyle

    """Name of key theme RC file to load"""
    gtk_key_theme_name = None  # type: str

    """When TRUE, there are only cursor keys available to navigate widgets"""
    gtk_keynav_cursor_only = None  # type: bool

    """Whether to wrap around when keyboard-navigating widgets"""
    gtk_keynav_wrap_around = None  # type: bool

    """Whether to select the contents of a selectable label when it is focused"""
    gtk_label_select_on_focus = None  # type: bool

    """Keybinding to activate the menu bar"""
    gtk_menu_bar_accel = None  # type: str

    """Delay before the submenus of a menu bar appear"""
    gtk_menu_bar_popup_delay = None  # type: gint

    """Whether images should be shown in menus"""
    gtk_menu_images = None  # type: bool

    """The time before hiding a submenu when the pointer is moving towards the submenu"""
    gtk_menu_popdown_delay = None  # type: gint

    """Minimum time the pointer must stay over a menu item before the submenu appear"""
    gtk_menu_popup_delay = None  # type: gint

    """List of currently active GTK modules"""
    gtk_modules = None  # type: str

    """Whether a primary click on the trough should warp the slider into position"""
    gtk_primary_button_warps_slider = None  # type: bool

    """List of the GtkPrintBackend backends to use by default"""
    gtk_print_backends = None  # type: str

    """Command to run when displaying a print preview"""
    gtk_print_preview_command = None  # type: str

    """Number of recently used files"""
    gtk_recent_files_limit = None  # type: gint

    """Maximum age of recently used files, in days"""
    gtk_recent_files_max_age = None  # type: gint

    """Where the contents of scrolled windows are located with respect to the scrollbars, if not overridden by the scrolled window's own placement."""
    gtk_scrolled_window_placement = None  # type: GtkCornerType

    """Whether the context menus of entries and text views should offer to change the input method"""
    gtk_show_input_method_menu = None  # type: bool

    """Whether the context menus of entries and text views should offer to insert control characters"""
    gtk_show_unicode_menu = None  # type: bool

    """XDG sound theme name"""
    gtk_sound_theme_name = None  # type: str

    """Whether two cursors should be displayed for mixed left-to-right and right-to-left text"""
    gtk_split_cursor = None  # type: bool

    """Name of theme RC file to load"""
    gtk_theme_name = None  # type: str

    """Expand value for timeouts, when a widget is expanding a new region"""
    gtk_timeout_expand = None  # type: gint

    """Starting value for timeouts, when button is pressed"""
    gtk_timeout_initial = None  # type: gint

    """Repeat value for timeouts, when button is pressed"""
    gtk_timeout_repeat = None  # type: gint

    """The size of icons in default toolbars."""
    gtk_toolbar_icon_size = None  # type: GtkIconSize

    """Whether default toolbars have text only, text and icons, icons only, etc."""
    gtk_toolbar_style = None  # type: GtkToolbarStyle

    """Timeout after which browse mode is disabled"""
    gtk_tooltip_browse_mode_timeout = None  # type: gint

    """Timeout before tooltip is shown when browse mode is enabled"""
    gtk_tooltip_browse_timeout = None  # type: gint

    """Timeout before tooltip is shown"""
    gtk_tooltip_timeout = None  # type: gint

    """When TRUE, there are no motion notify events delivered on this screen"""
    gtk_touchscreen_mode = None  # type: bool

    """Whether to antialias Xft fonts; 0=no, 1=yes, -1=default"""
    gtk_xft_antialias = None  # type: gint

    """Resolution for Xft, in 1024 * dots/inch. -1 to use default value"""
    gtk_xft_dpi = None  # type: gint

    """Whether to hint Xft fonts; 0=no, 1=yes, -1=default"""
    gtk_xft_hinting = None  # type: gint

    """What degree of hinting to use; hintnone, hintslight, hintmedium, or hintfull"""
    gtk_xft_hintstyle = None  # type: str

    """Type of subpixel antialiasing; none, rgb, bgr, vrgb, vbgr"""
    gtk_xft_rgba = None  # type: str

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class SizeGroup:
    """If TRUE, unmapped widgets are ignored when determining the size of the group"""
    ignore_hidden = None  # type: bool

    """The directions in which the size group affects the requested sizes of its component widgets"""
    mode = None  # type: GtkSizeGroupMode

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class Socket:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def plug_added(self) -> None: ...
    def plug_removed(self) -> bool: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class SpinButton:
    """Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed"""
    activates_default = None  # type: bool

    """The adjustment that holds the value of the spinbutton"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Text buffer object which actually stores entry text"""
    buffer = None  # type: GtkEntryBuffer

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether password entries will show a warning when Caps Lock is on"""
    caps_lock_warning = None  # type: bool

    """The acceleration rate when you hold down a button"""
    climb_rate = None  # type: gdouble

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The current position of the insertion cursor in chars"""
    cursor_position = None  # type: gint

    """The number of decimal places to display"""
    digits = None  # type: guint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the entry contents can be edited"""
    editable = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """FALSE removes outside bevel from entry"""
    has_frame = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Which IM module should be used"""
    im_module = None  # type: str

    """Border between text and frame. Overrides the inner-border style property"""
    inner_border = None  # type: GtkBorder

    """The character to use when masking entry contents (in "password mode")"""
    invisible_char = None  # type: guint

    """Whether the invisible char has been set"""
    invisible_char_set = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Maximum number of characters for this entry. Zero if no maximum"""
    max_length = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """Whether non-numeric characters should be ignored"""
    numeric = None  # type: bool

    """Whether new text overwrites existing text"""
    overwrite_mode = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Whether the primary icon is activatable"""
    primary_icon_activatable = None  # type: bool

    """GIcon for primary icon"""
    primary_icon_gicon = None  # type: GIcon

    """Icon name for primary icon"""
    primary_icon_name = None  # type: str

    """Primary pixbuf for the entry"""
    primary_icon_pixbuf = None  # type: GdkPixbuf

    """Whether the primary icon is sensitive"""
    primary_icon_sensitive = None  # type: bool

    """Stock ID for primary icon"""
    primary_icon_stock = None  # type: str

    """The representation being used for primary icon"""
    primary_icon_storage_type = None  # type: GtkImageType

    """The contents of the tooltip on the primary icon"""
    primary_icon_tooltip_markup = None  # type: str

    """The contents of the tooltip on the primary icon"""
    primary_icon_tooltip_text = None  # type: str

    """The current fraction of the task that's been completed"""
    progress_fraction = None  # type: gdouble

    """The fraction of total entry width to move the progress bouncing block for each call to gtk_entry_progress_pulse()"""
    progress_pulse_step = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Number of pixels of the entry scrolled off the screen to the left"""
    scroll_offset = None  # type: gint

    """Whether the secondary icon is activatable"""
    secondary_icon_activatable = None  # type: bool

    """GIcon for secondary icon"""
    secondary_icon_gicon = None  # type: GIcon

    """Icon name for secondary icon"""
    secondary_icon_name = None  # type: str

    """Secondary pixbuf for the entry"""
    secondary_icon_pixbuf = None  # type: GdkPixbuf

    """Whether the secondary icon is sensitive"""
    secondary_icon_sensitive = None  # type: bool

    """Stock ID for secondary icon"""
    secondary_icon_stock = None  # type: str

    """The representation being used for secondary icon"""
    secondary_icon_storage_type = None  # type: GtkImageType

    """The contents of the tooltip on the secondary icon"""
    secondary_icon_tooltip_markup = None  # type: str

    """The contents of the tooltip on the secondary icon"""
    secondary_icon_tooltip_text = None  # type: str

    """The position of the opposite end of the selection from the cursor in chars"""
    selection_bound = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Which kind of shadow to draw around the entry when has-frame is set"""
    shadow_type = None  # type: GtkShadowType

    """Whether erroneous values are automatically changed to a spin button's nearest step increment"""
    snap_to_ticks = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the entry"""
    text = None  # type: str

    """Length of the text currently in the entry"""
    text_length = None  # type: guint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether to truncate multiline pastes to one line."""
    truncate_multiline = None  # type: bool

    """Whether the spin button should update always, or only when the value is legal"""
    update_policy = None  # type: GtkSpinButtonUpdatePolicy

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Reads the current value, or sets a new value"""
    value = None  # type: gdouble

    """FALSE displays the "invisible char" instead of the actual text (password mode)"""
    visibility = None  # type: bool

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Number of characters to leave space for in the entry"""
    width_chars = None  # type: gint

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Whether a spin button should wrap upon reaching its limits"""
    wrap = None  # type: bool

    """The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts."""
    xalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def backspace(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType) -> None: ...
    def changed(self) -> None: ...
    def changed(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def cut_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_from_cursor(self, arg_1: GtkDeleteType, arg_2: gint) -> None: ...
    def delete_text(self, arg_1: gint, arg_2: gint) -> None: ...
    def delete_text(self, arg_1: gint, arg_2: gint) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def editing_done(self) -> None: ...
    def editing_done(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def icon_press(self, arg_1: GtkEntryIconPosition, arg_2: GdkEvent) -> None: ...
    def icon_release(self, arg_1: GtkEntryIconPosition, arg_2: GdkEvent) -> None: ...
    def input(self, arg_1: gpointer) -> gint: ...
    def insert_at_cursor(self, arg_1: gchararray) -> None: ...
    def insert_text(self, arg_1: gchararray, arg_2: gint, arg_3: gpointer) -> None: ...
    def insert_text(self, arg_1: gchararray, arg_2: gint, arg_3: gpointer) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint, arg_3: gboolean) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def output(self) -> bool: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def paste_clipboard(self) -> None: ...
    def populate_popup(self, arg_1: GtkMenu) -> None: ...
    def popup_menu(self) -> bool: ...
    def preedit_changed(self, arg_1: gchararray) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove_widget(self) -> None: ...
    def remove_widget(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_overwrite(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...
    def wrapped(self) -> None: ...


class Spinner:
    """Whether the spinner is active"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class StatusIcon:
    """Whether or not the status icon is blinking"""
    blinking = None  # type: bool

    """Whether or not the status icon is embedded"""
    embedded = None  # type: bool

    """Filename to load and display"""
    file = None  # type: str

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """Whether this tray icon has a tooltip"""
    has_tooltip = None  # type: bool

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """The orientation of the tray"""
    orientation = None  # type: GtkOrientation

    """A GdkPixbuf to display"""
    pixbuf = None  # type: GdkPixbuf

    """The screen where this status icon will be displayed"""
    screen = None  # type: GdkScreen

    """The size of the icon"""
    size = None  # type: gint

    """Stock ID for a stock image to display"""
    stock = None  # type: str

    """The representation being used for image data"""
    storage_type = None  # type: GtkImageType

    """The title of this tray icon"""
    title = None  # type: str

    """The contents of the tooltip for this tray icon"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Whether or not the status icon is visible"""
    visible = None  # type: bool

    def __init__(self): ...
    def activate(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def popup_menu(self, arg_1: guint, arg_2: guint) -> None: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def size_changed(self, arg_1: gint) -> bool: ...


class Statusbar:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether the statusbar has a grip for resizing the toplevel"""
    has_resize_grip = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def text_popped(self, arg_1: guint, arg_2: gchararray) -> None: ...
    def text_pushed(self, arg_1: guint, arg_2: gchararray) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Style:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def realize(self) -> None: ...
    def unrealize(self) -> None: ...


class Table:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """The amount of space between two consecutive columns"""
    column_spacing = None  # type: guint

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """If TRUE, the table cells are all the same width/height"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The number of columns in the table"""
    n_columns = None  # type: guint

    """The number of rows in the table"""
    n_rows = None  # type: guint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """The amount of space between two consecutive rows"""
    row_spacing = None  # type: guint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class TearoffMenuItem:
    """Sets the accelerator path of the menu item"""
    accel_path = None  # type: str

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The text for the child label"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Sets whether the menu item appears justified at the right side of a menu bar"""
    right_justified = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The submenu attached to the menu item, or NULL if it has none"""
    submenu = None  # type: GtkMenu

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def activate_item(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def deselect(self) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select(self) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle(self) -> None: ...
    def toggle_size_allocate(self, arg_1: gint) -> None: ...
    def toggle_size_request(self, arg_1: gpointer) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class TextAttributes:


    def __init__(self): ...


class TextBuffer:
    """The list of targets this buffer supports for clipboard copying and DND source"""
    copy_target_list = None  # type: GtkTargetList

    """The position of the insert mark (as offset from the beginning of the buffer)"""
    cursor_position = None  # type: gint

    """Whether the buffer has some text currently selected"""
    has_selection = None  # type: bool

    """The list of targets this buffer supports for clipboard pasting and DND destination"""
    paste_target_list = None  # type: GtkTargetList

    """Text Tag Table"""
    tag_table = None  # type: GtkTextTagTable

    """Current text of the buffer"""
    text = None  # type: str

    def __init__(self): ...
    def apply_tag(self, arg_1: GtkTextTag, arg_2: GtkTextIter, arg_3: GtkTextIter) -> None: ...
    def begin_user_action(self) -> None: ...
    def changed(self) -> None: ...
    def delete_range(self, arg_1: GtkTextIter, arg_2: GtkTextIter) -> None: ...
    def end_user_action(self) -> None: ...
    def insert_child_anchor(self, arg_1: GtkTextIter, arg_2: GtkTextChildAnchor) -> None: ...
    def insert_pixbuf(self, arg_1: GtkTextIter, arg_2: GdkPixbuf) -> None: ...
    def insert_text(self, arg_1: GtkTextIter, arg_2: gchararray, arg_3: gint) -> None: ...
    def mark_deleted(self, arg_1: GtkTextMark) -> None: ...
    def mark_set(self, arg_1: GtkTextIter, arg_2: GtkTextMark) -> None: ...
    def modified_changed(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def paste_done(self, arg_1: GtkClipboard) -> None: ...
    def remove_tag(self, arg_1: GtkTextTag, arg_2: GtkTextIter, arg_3: GtkTextIter) -> None: ...


class TextChildAnchor:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class TextIter:


    def __init__(self): ...


class TextMark:
    """Whether the mark has left gravity"""
    left_gravity = None  # type: bool

    """Mark name"""
    name = None  # type: str

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class TextTag:
    """Whether left and right margins accumulate."""
    accumulative_margin = None  # type: bool

    """Background color as a string"""
    background = None  # type: str

    """Whether the background color fills the entire line height or only the height of the tagged characters"""
    background_full_height = None  # type: bool

    """Whether this tag affects background height"""
    background_full_height_set = None  # type: bool

    """Background color as a (possibly unallocated) GdkColor"""
    background_gdk = None  # type: GdkColor

    """Whether this tag affects the background color"""
    background_set = None  # type: bool

    """Bitmap to use as a mask when drawing the text background"""
    background_stipple = None  # type: GdkPixmap

    """Whether this tag affects the background stipple"""
    background_stipple_set = None  # type: bool

    """Text direction, e.g. right-to-left or left-to-right"""
    direction = None  # type: GtkTextDirection

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """Whether this tag affects text editability"""
    editable_set = None  # type: bool

    """Name of the font family, e.g. Sans, Helvetica, Times, Monospace"""
    family = None  # type: str

    """Whether this tag affects the font family"""
    family_set = None  # type: bool

    """Font description as a string, e.g. "Sans Italic 12""""
    font = None  # type: str

    """Font description as a PangoFontDescription struct"""
    font_desc = None  # type: PangoFontDescription

    """Foreground color as a string"""
    foreground = None  # type: str

    """Foreground color as a (possibly unallocated) GdkColor"""
    foreground_gdk = None  # type: GdkColor

    """Whether this tag affects the foreground color"""
    foreground_set = None  # type: bool

    """Bitmap to use as a mask when drawing the text foreground"""
    foreground_stipple = None  # type: GdkPixmap

    """Whether this tag affects the foreground stipple"""
    foreground_stipple_set = None  # type: bool

    """Amount to indent the paragraph, in pixels"""
    indent = None  # type: gint

    """Whether this tag affects indentation"""
    indent_set = None  # type: bool

    """Whether this text is hidden."""
    invisible = None  # type: bool

    """Whether this tag affects text visibility"""
    invisible_set = None  # type: bool

    """Left, right, or center justification"""
    justification = None  # type: GtkJustification

    """Whether this tag affects paragraph justification"""
    justification_set = None  # type: bool

    """The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used."""
    language = None  # type: str

    """Whether this tag affects the language the text is rendered as"""
    language_set = None  # type: bool

    """Width of the left margin in pixels"""
    left_margin = None  # type: gint

    """Whether this tag affects the left margin"""
    left_margin_set = None  # type: bool

    """Name used to refer to the text tag. NULL for anonymous tags"""
    name = None  # type: str

    """Paragraph background color as a string"""
    paragraph_background = None  # type: str

    """Paragraph background color as a (possibly unallocated) GdkColor"""
    paragraph_background_gdk = None  # type: GdkColor

    """Whether this tag affects the paragraph background color"""
    paragraph_background_set = None  # type: bool

    """Pixels of blank space above paragraphs"""
    pixels_above_lines = None  # type: gint

    """Whether this tag affects the number of pixels above lines"""
    pixels_above_lines_set = None  # type: bool

    """Pixels of blank space below paragraphs"""
    pixels_below_lines = None  # type: gint

    """Whether this tag affects the number of pixels above lines"""
    pixels_below_lines_set = None  # type: bool

    """Pixels of blank space between wrapped lines in a paragraph"""
    pixels_inside_wrap = None  # type: gint

    """Whether this tag affects the number of pixels between wrapped lines"""
    pixels_inside_wrap_set = None  # type: bool

    """Width of the right margin in pixels"""
    right_margin = None  # type: gint

    """Whether this tag affects the right margin"""
    right_margin_set = None  # type: bool

    """Offset of text above the baseline (below the baseline if rise is negative) in Pango units"""
    rise = None  # type: gint

    """Whether this tag affects the rise"""
    rise_set = None  # type: bool

    """Font size as a scale factor relative to the default font size. This properly adapts to theme changes etc. so is recommended. Pango predefines some scales such as PANGO_SCALE_X_LARGE"""
    scale = None  # type: gdouble

    """Whether this tag scales the font size by a factor"""
    scale_set = None  # type: bool

    """Font size in Pango units"""
    size = None  # type: gint

    """Font size in points"""
    size_points = None  # type: gdouble

    """Whether this tag affects the font size"""
    size_set = None  # type: bool

    """Font stretch as a PangoStretch, e.g. PANGO_STRETCH_CONDENSED"""
    stretch = None  # type: PangoStretch

    """Whether this tag affects the font stretch"""
    stretch_set = None  # type: bool

    """Whether to strike through the text"""
    strikethrough = None  # type: bool

    """Whether this tag affects strikethrough"""
    strikethrough_set = None  # type: bool

    """Font style as a PangoStyle, e.g. PANGO_STYLE_ITALIC"""
    style = None  # type: PangoStyle

    """Whether this tag affects the font style"""
    style_set = None  # type: bool

    """Custom tabs for this text"""
    tabs = None  # type: PangoTabArray

    """Whether this tag affects tabs"""
    tabs_set = None  # type: bool

    """Style of underline for this text"""
    underline = None  # type: PangoUnderline

    """Whether this tag affects underlining"""
    underline_set = None  # type: bool

    """Font variant as a PangoVariant, e.g. PANGO_VARIANT_SMALL_CAPS"""
    variant = None  # type: PangoVariant

    """Whether this tag affects the font variant"""
    variant_set = None  # type: bool

    """Font weight as an integer, see predefined values in PangoWeight; for example, PANGO_WEIGHT_BOLD"""
    weight = None  # type: gint

    """Whether this tag affects the font weight"""
    weight_set = None  # type: bool

    """Whether to wrap lines never, at word boundaries, or at character boundaries"""
    wrap_mode = None  # type: GtkWrapMode

    """Whether this tag affects line wrap mode"""
    wrap_mode_set = None  # type: bool

    def __init__(self): ...
    def event(self, arg_1: GObject, arg_2: GdkEvent, arg_3: GtkTextIter) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...


class TextTagTable:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def tag_added(self, arg_1: GtkTextTag) -> None: ...
    def tag_changed(self, arg_1: GtkTextTag, arg_2: gboolean) -> None: ...
    def tag_removed(self, arg_1: GtkTextTag) -> None: ...


class TextView:
    """Whether Tab will result in a tab character being entered"""
    accepts_tab = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """The buffer which is displayed"""
    buffer = None  # type: GtkTextBuffer

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """If the insertion cursor is shown"""
    cursor_visible = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the text can be modified by the user"""
    editable = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Which IM module should be used"""
    im_module = None  # type: str

    """Amount to indent the paragraph, in pixels"""
    indent = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Left, right, or center justification"""
    justification = None  # type: GtkJustification

    """Width of the left margin in pixels"""
    left_margin = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """Whether entered text overwrites existing contents"""
    overwrite = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Pixels of blank space above paragraphs"""
    pixels_above_lines = None  # type: gint

    """Pixels of blank space below paragraphs"""
    pixels_below_lines = None  # type: gint

    """Pixels of blank space between wrapped lines in a paragraph"""
    pixels_inside_wrap = None  # type: gint

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Width of the right margin in pixels"""
    right_margin = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """Custom tabs for this text"""
    tabs = None  # type: PangoTabArray

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Whether to wrap lines never, at word boundaries, or at character boundaries"""
    wrap_mode = None  # type: GtkWrapMode

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def backspace(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def copy_clipboard(self) -> None: ...
    def cut_clipboard(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_from_cursor(self, arg_1: GtkDeleteType, arg_2: gint) -> None: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def insert_at_cursor(self, arg_1: gchararray) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint, arg_3: gboolean) -> None: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_viewport(self, arg_1: GtkScrollStep, arg_2: gint) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def page_horizontally(self, arg_1: gint, arg_2: gboolean) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def paste_clipboard(self) -> None: ...
    def populate_popup(self, arg_1: GtkMenu) -> None: ...
    def popup_menu(self) -> bool: ...
    def preedit_changed(self, arg_1: gchararray) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select_all(self, arg_1: gboolean) -> None: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_anchor(self) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_cursor_visible(self) -> None: ...
    def toggle_overwrite(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToggleAction:
    """The GtkActionGroup this GtkAction is associated with, or NULL (for internal use)."""
    action_group = None  # type: GtkActionGroup

    """If the toggle action should be active in or not"""
    active = None  # type: bool

    """Whether the image will always be shown"""
    always_show_image = None  # type: bool

    """Whether the proxies for this action look like radio action proxies"""
    draw_as_radio = None  # type: bool

    """The GIcon being displayed"""
    gicon = None  # type: GIcon

    """When TRUE, empty menu proxies for this action are hidden."""
    hide_if_empty = None  # type: bool

    """The name of the icon from the icon theme"""
    icon_name = None  # type: str

    """Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode."""
    is_important = None  # type: bool

    """The label used for menu items and buttons that activate this action."""
    label = None  # type: str

    """A unique name for the action."""
    name = None  # type: str

    """Whether the action is enabled."""
    sensitive = None  # type: bool

    """A shorter label that may be used on toolbar buttons."""
    short_label = None  # type: str

    """The stock icon displayed in widgets representing this action."""
    stock_id = None  # type: str

    """A tooltip for this action."""
    tooltip = None  # type: str

    """Whether the action is visible."""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu."""
    visible_overflown = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    def __init__(self): ...
    def activate(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def toggled(self) -> None: ...


class ToggleButton:
    """If the toggle button should be pressed in or not"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """If the toggle part of the button is displayed"""
    draw_indicator = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """If the toggle button is in an "in between" state"""
    inconsistent = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggled(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToggleToolButton:
    """If the toggle button should be pressed in or not"""
    active = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The name of the themed icon displayed on the item"""
    icon_name = None  # type: str

    """Icon widget to display in the item"""
    icon_widget = None  # type: GtkWidget

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """Text to show in the item."""
    label = None  # type: str

    """Widget to use as the item label"""
    label_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The stock icon displayed on the item"""
    stock_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggled(self) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToolButton:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """The name of the themed icon displayed on the item"""
    icon_name = None  # type: str

    """Icon widget to display in the item"""
    icon_widget = None  # type: GtkWidget

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """Text to show in the item."""
    label = None  # type: str

    """Widget to use as the item label"""
    label_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The stock icon displayed on the item"""
    stock_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToolItem:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode"""
    is_important = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a horizontal orientation."""
    visible_horizontal = None  # type: bool

    """Whether the toolbar item is visible when the toolbar is in a vertical orientation."""
    visible_vertical = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def create_menu_proxy(self) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_tooltip(self, arg_1: GtkTooltips, arg_2: gchararray, arg_3: gchararray) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toolbar_reconfigured(self) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToolItemGroup:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the group has been collapsed and items are hidden"""
    collapsed = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Ellipsize for item group headers"""
    ellipsize = None  # type: PangoEllipsizeMode

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Relief of the group header button"""
    header_relief = None  # type: GtkReliefStyle

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The human-readable title of this item group"""
    label = None  # type: str

    """A widget to display in place of the usual label"""
    label_widget = None  # type: GtkWidget

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToolPalette:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Size of icons in this tool palette"""
    icon_size = None  # type: GtkIconSize

    """Whether the icon-size property has been set"""
    icon_size_set = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """Style of items in the tool palette"""
    toolbar_style = None  # type: GtkToolbarStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class ToolShell:


    def __init__(self): ...


class Toolbar:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Size of icons in this toolbar"""
    icon_size = None  # type: gint

    """Whether the icon-size property has been set"""
    icon_size_set = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """If an arrow should be shown if the toolbar doesn't fit"""
    show_arrow = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """How to draw the toolbar"""
    toolbar_style = None  # type: GtkToolbarStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If the tooltips of the toolbar should be active or not"""
    tooltips = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_home_or_end(self, arg_1: gboolean) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def orientation_changed(self, arg_1: GtkOrientation) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_context_menu(self, arg_1: gint, arg_2: gint, arg_3: gint) -> bool: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_changed(self, arg_1: GtkToolbarStyle) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Tooltip:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


class Tooltips:
    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    def __init__(self): ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class TreeDragDest:


    def __init__(self): ...


class TreeDragSource:


    def __init__(self): ...


class TreeIter:


    def __init__(self): ...


class TreeModel:


    def __init__(self): ...


class TreeModelFilter:
    """The model for the filtermodel to filter"""
    child_model = None  # type: GtkTreeModel

    """The virtual root (relative to the child model) for this filtermodel"""
    virtual_root = None  # type: GtkTreePath

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def row_changed(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_deleted(self, arg_1: GtkTreePath) -> None: ...
    def row_has_child_toggled(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_inserted(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def rows_reordered(self, arg_1: GtkTreePath, arg_2: GtkTreeIter, arg_3: gpointer) -> None: ...


class TreeModelSort:
    """The model for the TreeModelSort to sort"""
    model = None  # type: GtkTreeModel

    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def row_changed(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_deleted(self, arg_1: GtkTreePath) -> None: ...
    def row_has_child_toggled(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_inserted(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def rows_reordered(self, arg_1: GtkTreePath, arg_2: GtkTreeIter, arg_3: gpointer) -> None: ...
    def sort_column_changed(self) -> None: ...


class TreeRowReference:


    def __init__(self): ...


class TreeSelection:


    def __init__(self): ...
    def changed(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class TreeSortable:


    def __init__(self): ...


class TreeStore:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...
    def row_changed(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_deleted(self, arg_1: GtkTreePath) -> None: ...
    def row_has_child_toggled(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def row_inserted(self, arg_1: GtkTreePath, arg_2: GtkTreeIter) -> None: ...
    def rows_reordered(self, arg_1: GtkTreePath, arg_2: GtkTreeIter, arg_3: gpointer) -> None: ...
    def sort_column_changed(self) -> None: ...


class TreeView:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether grid lines should be drawn in the tree view"""
    enable_grid_lines = None  # type: GtkTreeViewGridLines

    """View allows user to search through columns interactively"""
    enable_search = None  # type: bool

    """Whether tree lines should be drawn in the tree view"""
    enable_tree_lines = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """Set the column for the expander column"""
    expander_column = None  # type: GtkTreeViewColumn

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Speeds up GtkTreeView by assuming that all rows have the same height"""
    fixed_height_mode = None  # type: bool

    """Horizontal Adjustment for the widget"""
    hadjustment = None  # type: GtkAdjustment

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Column headers respond to click events"""
    headers_clickable = None  # type: bool

    """Show the column header buttons"""
    headers_visible = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether rows should be expanded/collapsed when the pointer moves over them"""
    hover_expand = None  # type: bool

    """Whether the selection should follow the pointer"""
    hover_selection = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Extra indentation for each level"""
    level_indentation = None  # type: gint

    """The model for the tree view"""
    model = None  # type: GtkTreeModel

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """View is reorderable"""
    reorderable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether to enable selection of multiple items by dragging the mouse pointer"""
    rubber_banding = None  # type: bool

    """Set a hint to the theme engine to draw rows in alternating colors"""
    rules_hint = None  # type: bool

    """Model column to search through during interactive search"""
    search_column = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """View has expanders"""
    show_expanders = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The column in the model containing the tooltip texts for the rows"""
    tooltip_column = None  # type: gint

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Vertical Adjustment for the widget"""
    vadjustment = None  # type: GtkAdjustment

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def columns_changed(self) -> None: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cursor_changed(self) -> None: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expand_collapse_cursor_row(self, arg_1: gboolean, arg_2: gboolean, arg_3: gboolean) -> bool: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_cursor(self, arg_1: GtkMovementStep, arg_2: gint) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def row_activated(self, arg_1: GtkTreePath, arg_2: GtkTreeViewColumn) -> None: ...
    def row_collapsed(self, arg_1: GtkTreeIter, arg_2: GtkTreePath) -> None: ...
    def row_expanded(self, arg_1: GtkTreeIter, arg_2: GtkTreePath) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def select_all(self) -> bool: ...
    def select_cursor_parent(self) -> bool: ...
    def select_cursor_row(self, arg_1: gboolean) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def start_interactive_search(self) -> bool: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def test_collapse_row(self, arg_1: GtkTreeIter, arg_2: GtkTreePath) -> bool: ...
    def test_expand_row(self, arg_1: GtkTreeIter, arg_2: GtkTreePath) -> bool: ...
    def toggle_cursor_row(self) -> bool: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def unselect_all(self) -> bool: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class TreeViewColumn:
    """X Alignment of the column header text or widget"""
    alignment = None  # type: gfloat

    """Whether the header can be clicked"""
    clickable = None  # type: bool

    """Column gets share of extra width allocated to the widget"""
    expand = None  # type: bool

    """Current fixed width of the column"""
    fixed_width = None  # type: gint

    """Maximum allowed width of the column"""
    max_width = None  # type: gint

    """Minimum allowed width of the column"""
    min_width = None  # type: gint

    """Whether the column can be reordered around the headers"""
    reorderable = None  # type: bool

    """Column is user-resizable"""
    resizable = None  # type: bool

    """Resize mode of the column"""
    sizing = None  # type: GtkTreeViewColumnSizing

    """Logical sort column ID this column sorts on when selected for sorting"""
    sort_column_id = None  # type: gint

    """Whether to show a sort indicator"""
    sort_indicator = None  # type: bool

    """Sort direction the sort indicator should indicate"""
    sort_order = None  # type: GtkSortType

    """Space which is inserted between cells"""
    spacing = None  # type: gint

    """Title to appear in column header"""
    title = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether to display the column"""
    visible = None  # type: bool

    """Widget to put in column header button instead of column title"""
    widget = None  # type: GtkWidget

    """Current width of the column"""
    width = None  # type: gint

    def __init__(self): ...
    def clicked(self) -> None: ...
    def destroy(self) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...


class UIManager:
    """Whether tearoff menu items should be added to menus"""
    add_tearoffs = None  # type: bool

    """An XML string describing the merged UI"""
    ui = None  # type: str

    def __init__(self): ...
    def actions_changed(self) -> None: ...
    def add_widget(self, arg_1: GtkWidget) -> None: ...
    def connect_proxy(self, arg_1: GtkAction, arg_2: GtkWidget) -> None: ...
    def disconnect_proxy(self, arg_1: GtkAction, arg_2: GtkWidget) -> None: ...
    def notify(self, arg_1: GParam) -> None: ...
    def post_activate(self, arg_1: GtkAction) -> None: ...
    def pre_activate(self, arg_1: GtkAction) -> None: ...


class VBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VButtonBox:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the children should all be the same size"""
    homogeneous = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """How to lay out the buttons in the box. Possible values are: default, spread, edge, start and end"""
    layout_style = None  # type: GtkButtonBoxStyle

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The amount of space between children"""
    spacing = None  # type: gint

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VPaned:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Largest possible value for the "position" property"""
    max_position = None  # type: gint

    """Smallest possible value for the "position" property"""
    min_position = None  # type: gint

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of paned separator in pixels (0 means all the way to the left/top)"""
    position = None  # type: gint

    """TRUE if the Position property should be used"""
    position_set = None  # type: bool

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def accept_position(self) -> bool: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def cancel_position(self) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def cycle_child_focus(self, arg_1: gboolean) -> bool: ...
    def cycle_handle_focus(self, arg_1: gboolean) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_handle(self, arg_1: GtkScrollType) -> bool: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def toggle_handle_focus(self) -> bool: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VRuler:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Lower limit of ruler"""
    lower = None  # type: gdouble

    """Maximum size of the ruler"""
    max_size = None  # type: gdouble

    """The metric used for the ruler"""
    metric = None  # type: GtkMetricType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """Position of mark on the ruler"""
    position = None  # type: gdouble

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Upper limit of ruler"""
    upper = None  # type: gdouble

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VScale:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """The number of decimal places that are displayed in the value"""
    digits = None  # type: gint

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """Whether the current value is displayed as a string next to the slider"""
    draw_value = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The position in which the current value is displayed"""
    value_pos = None  # type: GtkPositionType

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def format_value(self, arg_1: gdouble) -> str: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VScrollbar:
    """The GtkAdjustment that contains the current value of this range object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The fill level."""
    fill_level = None  # type: gdouble

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Invert direction slider moves to increase range value"""
    inverted = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The sensitivity policy for the stepper that points to the adjustment's lower side"""
    lower_stepper_sensitivity = None  # type: GtkSensitivityType

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether to restrict the upper boundary to the fill level."""
    restrict_to_fill_level = None  # type: bool

    """The number of digits to round the value to."""
    round_digits = None  # type: gint

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Whether to display a fill level indicator graphics on trough."""
    show_fill_level = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """How the range should be updated on the screen"""
    update_policy = None  # type: GtkUpdateType

    """The sensitivity policy for the stepper that points to the adjustment's upper side"""
    upper_stepper_sensitivity = None  # type: GtkSensitivityType

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def adjust_bounds(self, arg_1: gdouble) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def change_value(self, arg_1: GtkScrollType, arg_2: gdouble) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def move_slider(self, arg_1: GtkScrollType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VSeparator:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Viewport:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """The GtkAdjustment that determines the values of the horizontal position for this viewport"""
    hadjustment = None  # type: GtkAdjustment

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """Determines how the shadowed box around the viewport is drawn"""
    shadow_type = None  # type: GtkShadowType

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The GtkAdjustment that determines the values of the vertical position for this viewport"""
    vadjustment = None  # type: GtkAdjustment

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def set_scroll_adjustments(self, arg_1: GtkAdjustment, arg_2: GtkAdjustment) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class VolumeButton:
    """The GtkAdjustment that contains the current value of this scale button object"""
    adjustment = None  # type: GtkAdjustment

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the button grabs focus when it is clicked with the mouse"""
    focus_on_click = None  # type: bool

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """List of icon names"""
    icons = None  # type: GStrv

    """Child widget to appear next to the button text"""
    image = None  # type: GtkWidget

    """The position of the image relative to the text"""
    image_position = None  # type: GtkPositionType

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Text of the label widget inside the button, if the button contains a label widget"""
    label = None  # type: str

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """The border relief style"""
    relief = None  # type: GtkReliefStyle

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The icon size"""
    size = None  # type: GtkIconSize

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """If set, the label is used to pick a stock item instead of being displayed"""
    use_stock = None  # type: bool

    """If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key"""
    use_underline = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """The value of the scale"""
    value = None  # type: gdouble

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned"""
    xalign = None  # type: gfloat

    """Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned"""
    yalign = None  # type: gfloat

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def clicked(self) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter(self) -> None: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popdown(self) -> None: ...
    def popup(self) -> None: ...
    def popup_menu(self) -> bool: ...
    def pressed(self) -> None: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def released(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def value_changed(self, arg_1: gdouble) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Widget:
    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class Window:
    """TRUE if the window should receive the input focus."""
    accept_focus = None  # type: bool

    """If TRUE, users can expand the window beyond its minimum size"""
    allow_grow = None  # type: bool

    """If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea"""
    allow_shrink = None  # type: bool

    """Whether the application will paint directly on the widget"""
    app_paintable = None  # type: bool

    """The width of the empty border outside the containers children"""
    border_width = None  # type: guint

    """Whether the widget can be the default widget"""
    can_default = None  # type: bool

    """Whether the widget can accept the input focus"""
    can_focus = None  # type: bool

    """Can be used to add a new child to the container"""
    child = None  # type: GtkWidget

    """Whether the widget is part of a composite widget"""
    composite_child = None  # type: bool

    """Whether the window should be decorated by the window manager"""
    decorated = None  # type: bool

    """The default height of the window, used when initially showing the window"""
    default_height = None  # type: gint

    """The default width of the window, used when initially showing the window"""
    default_width = None  # type: gint

    """Whether the window frame should have a close button"""
    deletable = None  # type: bool

    """If this window should be destroyed when the parent is destroyed"""
    destroy_with_parent = None  # type: bool

    """Whether or not the widget is double buffered"""
    double_buffered = None  # type: bool

    """The event mask that decides what kind of GdkEvents this widget gets"""
    events = None  # type: GdkEventMask

    """The mask that decides what kind of extension events this widget gets"""
    extension_events = None  # type: GdkExtensionMode

    """TRUE if the window should receive the input focus when mapped."""
    focus_on_map = None  # type: bool

    """The window gravity of the window"""
    gravity = None  # type: GdkGravity

    """Whether the widget is the default widget"""
    has_default = None  # type: bool

    """Whether the widget has the input focus"""
    has_focus = None  # type: bool

    """Whether this widget has a tooltip"""
    has_tooltip = None  # type: bool

    """Whether the input focus is within this GtkWindow"""
    has_toplevel_focus = None  # type: bool

    """Override for height request of the widget, or -1 if natural request should be used"""
    height_request = None  # type: gint

    """Icon for this window"""
    icon = None  # type: GdkPixbuf

    """Name of the themed icon for this window"""
    icon_name = None  # type: str

    """Whether the toplevel is the current active window"""
    is_active = None  # type: bool

    """Whether the widget is the focus widget within the toplevel"""
    is_focus = None  # type: bool

    """Whether mnemonics are currently visible in this window"""
    mnemonics_visible = None  # type: bool

    """If TRUE, the window is modal (other windows are not usable while this one is up)"""
    modal = None  # type: bool

    """The name of the widget"""
    name = None  # type: str

    """Whether gtk_widget_show_all() should not affect this widget"""
    no_show_all = None  # type: bool

    """The opacity of the window, from 0 to 1"""
    opacity = None  # type: gdouble

    """The parent widget of this widget. Must be a Container widget"""
    parent = None  # type: GtkContainer

    """If TRUE, the widget will receive the default action when it is focused"""
    receives_default = None  # type: bool

    """If TRUE, users can resize the window"""
    resizable = None  # type: bool

    """Specify how resize events are handled"""
    resize_mode = None  # type: GtkResizeMode

    """Unique identifier for the window to be used when restoring a session"""
    role = None  # type: str

    """The screen where this window will be displayed"""
    screen = None  # type: GdkScreen

    """Whether the widget responds to input"""
    sensitive = None  # type: bool

    """TRUE if the window should not be in the pager."""
    skip_pager_hint = None  # type: bool

    """TRUE if the window should not be in the task bar."""
    skip_taskbar_hint = None  # type: bool

    """Unique startup identifier for the window used by startup-notification"""
    startup_id = None  # type: str

    """The style of the widget, which contains information about how it will look (colors etc)"""
    style = None  # type: GtkStyle

    """The title of the window"""
    title = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_markup = None  # type: str

    """The contents of the tooltip for this widget"""
    tooltip_text = None  # type: str

    """The transient parent of the dialog"""
    transient_for = None  # type: GtkWindow

    """The type of the window"""
    type = None  # type: GtkWindowType

    """Hint to help the desktop environment understand what kind of window this is and how to treat it."""
    type_hint = None  # type: GdkWindowTypeHint

    """TRUE if the window should be brought to the user's attention."""
    urgency_hint = None  # type: bool

    """Anonymous User Data Pointer"""
    user_data = None  # type: gpointer

    """Whether the widget is visible"""
    visible = None  # type: bool

    """Override for width request of the widget, or -1 if natural request should be used"""
    width_request = None  # type: gint

    """The widget's window if it is realized"""
    window = None  # type: Window

    """The initial position of the window"""
    window_position = None  # type: GtkWindowPosition

    def __init__(self): ...
    def accel_closures_changed(self) -> None: ...
    def activate_default(self) -> None: ...
    def activate_focus(self) -> None: ...
    def add(self, arg_1: GtkWidget) -> None: ...
    def button_press_event(self, arg_1: GdkEvent) -> bool: ...
    def button_release_event(self, arg_1: GdkEvent) -> bool: ...
    def can_activate_accel(self, arg_1: guint) -> bool: ...
    def check_resize(self) -> None: ...
    def child_notify(self, arg_1: GParam) -> None: ...
    def client_event(self, arg_1: GdkEvent) -> bool: ...
    def composited_changed(self) -> None: ...
    def configure_event(self, arg_1: GdkEvent) -> bool: ...
    def damage_event(self, arg_1: GdkEvent) -> bool: ...
    def delete_event(self, arg_1: GdkEvent) -> bool: ...
    def destroy(self) -> None: ...
    def destroy_event(self, arg_1: GdkEvent) -> bool: ...
    def direction_changed(self, arg_1: GtkTextDirection) -> None: ...
    def drag_begin(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_delete(self, arg_1: GdkDragContext) -> None: ...
    def drag_data_get(self, arg_1: GdkDragContext, arg_2: GtkSelectionData, arg_3: guint, arg_4: guint) -> None: ...
    def drag_data_received(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: GtkSelectionData, arg_5: guint, arg_6: guint) -> None: ...
    def drag_drop(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def drag_end(self, arg_1: GdkDragContext) -> None: ...
    def drag_failed(self, arg_1: GdkDragContext, arg_2: GtkDragResult) -> bool: ...
    def drag_leave(self, arg_1: GdkDragContext, arg_2: guint) -> None: ...
    def drag_motion(self, arg_1: GdkDragContext, arg_2: gint, arg_3: gint, arg_4: guint) -> bool: ...
    def enter_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def event(self, arg_1: GdkEvent) -> bool: ...
    def event_after(self, arg_1: GdkEvent) -> None: ...
    def expose_event(self, arg_1: GdkEvent) -> bool: ...
    def focus(self, arg_1: GtkDirectionType) -> bool: ...
    def focus_in_event(self, arg_1: GdkEvent) -> bool: ...
    def focus_out_event(self, arg_1: GdkEvent) -> bool: ...
    def frame_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_broken_event(self, arg_1: GdkEvent) -> bool: ...
    def grab_focus(self) -> None: ...
    def grab_notify(self, arg_1: gboolean) -> None: ...
    def hide(self) -> None: ...
    def hierarchy_changed(self, arg_1: GtkWidget) -> None: ...
    def key_press_event(self, arg_1: GdkEvent) -> bool: ...
    def key_release_event(self, arg_1: GdkEvent) -> bool: ...
    def keynav_failed(self, arg_1: GtkDirectionType) -> bool: ...
    def keys_changed(self) -> None: ...
    def leave_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def map(self) -> None: ...
    def map_event(self, arg_1: GdkEvent) -> bool: ...
    def mnemonic_activate(self, arg_1: gboolean) -> bool: ...
    def motion_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def move_focus(self, arg_1: GtkDirectionType) -> None: ...
    def no_expose_event(self, arg_1: GdkEvent) -> bool: ...
    def notify(self, arg_1: GParam) -> None: ...
    def parent_set(self, arg_1: GtkWidget) -> None: ...
    def popup_menu(self) -> bool: ...
    def property_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_in_event(self, arg_1: GdkEvent) -> bool: ...
    def proximity_out_event(self, arg_1: GdkEvent) -> bool: ...
    def query_tooltip(self, arg_1: gint, arg_2: gint, arg_3: gboolean, arg_4: GtkTooltip) -> bool: ...
    def realize(self) -> None: ...
    def remove(self, arg_1: GtkWidget) -> None: ...
    def screen_changed(self, arg_1: GdkScreen) -> None: ...
    def scroll_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_clear_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_get(self, arg_1: GtkSelectionData, arg_2: guint, arg_3: guint) -> None: ...
    def selection_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def selection_received(self, arg_1: GtkSelectionData, arg_2: guint) -> None: ...
    def selection_request_event(self, arg_1: GdkEvent) -> bool: ...
    def set_focus(self, arg_1: GtkWidget) -> None: ...
    def set_focus_child(self, arg_1: GtkWidget) -> None: ...
    def show(self) -> None: ...
    def show_help(self, arg_1: GtkWidgetHelpType) -> bool: ...
    def size_allocate(self, arg_1: GdkRectangle) -> None: ...
    def size_request(self, arg_1: GtkRequisition) -> None: ...
    def state_changed(self, arg_1: GtkStateType) -> None: ...
    def style_set(self, arg_1: GtkStyle) -> None: ...
    def unmap(self) -> None: ...
    def unmap_event(self, arg_1: GdkEvent) -> bool: ...
    def unrealize(self) -> None: ...
    def visibility_notify_event(self, arg_1: GdkEvent) -> bool: ...
    def window_state_event(self, arg_1: GdkEvent) -> bool: ...


class WindowGroup:


    def __init__(self): ...
    def notify(self, arg_1: GParam) -> None: ...


#
# Functions
#

def about_dialog_set_email_hook(): ...
def about_dialog_set_url_hook(): ...
def accel_group_from_accel_closure(): ...
def accel_groups_activate(): ...
def accel_groups_from_object(): ...
def accel_map_add_entry(): ...
def accel_map_add_filter(): ...
def accel_map_change_entry(): ...
def accel_map_foreach(): ...
def accel_map_foreach_unfiltered(): ...
def accel_map_get(): ...
def accel_map_load(): ...
def accel_map_load_fd(): ...
def accel_map_lock_path(): ...
def accel_map_lookup_entry(): ...
def accel_map_save(): ...
def accel_map_save_fd(): ...
def accel_map_unlock_path(): ...
def accelerator_get_default_mod_mask(): ...
def accelerator_get_label(): ...
def accelerator_name(): ...
def accelerator_parse(): ...
def accelerator_set_default_mod_mask(): ...
def accelerator_valid(): ...
def add_log_handlers(): ...
def alternative_dialog_button_order(): ...
def binding_entry_add_signal(): ...
def binding_entry_remove(): ...
def bindings_activate(): ...
def bindings_activate_event(): ...
def cell_view_new_with_markup(): ...
def cell_view_new_with_pixbuf(): ...
def cell_view_new_with_text(): ...
def check_version(): ...
def clipboard_get(): ...
def color_selection_palette_from_string(): ...
def color_selection_palette_to_string(): ...
def combo_box_entry_new_text(): ...
def combo_box_entry_new_with_model(): ...
def combo_box_new_text(): ...
def combo_box_new_with_entry(): ...
def combo_box_new_with_model_and_entry(): ...
def combo_box_text_new_with_entry(): ...
def container_class_install_child_property(): ...
def container_class_list_child_properties(): ...
def disable_setlocale(): ...
def drag_get_source_widget(): ...
def drag_set_default_icon(): ...
def drag_source_set_icon_name(): ...
def draw_insertion_cursor(): ...
def events_pending(): ...
def expander_new_with_mnemonic(): ...
def file_chooser_widget_new_with_backend(): ...
def get_current_event(): ...
def get_current_event_state(): ...
def get_current_event_time(): ...
def get_default_language(): ...
def grab_get_current(): ...
def gtk_tooltips_data_get(): ...
def gtk_window_get_default_icon_name(): ...
def hbutton_box_get_layout_default(): ...
def hbutton_box_get_spacing_default(): ...
def hbutton_box_set_layout_default(): ...
def hbutton_box_set_spacing_default(): ...
def hsv_to_rgb(): ...
def icon_factory_lookup_default(): ...
def icon_info_new_for_pixbuf(): ...
def icon_set_new(): ...
def icon_size_from_name(): ...
def icon_size_get_name(): ...
def icon_size_lookup(): ...
def icon_size_lookup_for_settings(): ...
def icon_size_register(): ...
def icon_size_register_alias(): ...
def icon_theme_add_builtin_icon(): ...
def icon_theme_get_default(): ...
def icon_theme_get_for_screen(): ...
def image_new_from_animation(): ...
def image_new_from_file(): ...
def image_new_from_gicon(): ...
def image_new_from_icon_name(): ...
def image_new_from_icon_set(): ...
def image_new_from_image(): ...
def image_new_from_pixbuf(): ...
def image_new_from_pixmap(): ...
def image_new_from_stock(): ...
def init_check(): ...
def item_factories_path_delete(): ...
def item_factory_add_foreign(): ...
def item_factory_from_path(): ...
def item_factory_from_widget(): ...
def item_factory_path_from_widget(): ...
def link_button_new(): ...
def link_button_set_uri_hook(): ...
def main(): ...
def main_do_event(): ...
def main_iteration(): ...
def main_iteration_do(): ...
def main_level(): ...
def main_quit(): ...
def new_with_buffer(): ...
def notebook_set_window_creation_hook(): ...
def page_setup_new_from_file(): ...
def paper_size_get_default(): ...
def paper_size_new_custom(): ...
def paper_size_new_from_ppd(): ...
def plug_new_for_display(): ...
def preview_get_cmap(): ...
def preview_get_visual(): ...
def preview_reset(): ...
def preview_set_color_cube(): ...
def preview_set_gamma(): ...
def preview_set_install_cmap(): ...
def preview_set_reserved(): ...
def print_run_page_setup_dialog(): ...
def print_settings_new_from_file(): ...
def quit_add(): ...
def quit_remove(): ...
def rc_add_default_file(): ...
def rc_find_module_in_path(): ...
def rc_get_default_files(): ...
def rc_get_im_module_file(): ...
def rc_get_im_module_path(): ...
def rc_get_module_dir(): ...
def rc_get_style_by_paths(): ...
def rc_get_theme_dir(): ...
def rc_parse(): ...
def rc_parse_string(): ...
def rc_reparse_all(): ...
def rc_reparse_all_for_settings(): ...
def rc_reset_styles(): ...
def rc_set_default_files(): ...
def recent_action_new_for_manager(): ...
def recent_manager_get_default(): ...
def recent_manager_get_for_screen(): ...
def remove_log_handlers(): ...
def selection_owner_set_for_display(): ...
def set_interactive(): ...
def settings_get_default(): ...
def settings_get_for_screen(): ...
def show_about_dialog(): ...
def show_uri(): ...
def status_icon_new_from_file(): ...
def status_icon_new_from_gicon(): ...
def status_icon_new_from_icon_name(): ...
def status_icon_new_from_pixbuf(): ...
def status_icon_new_from_stock(): ...
def status_icon_position_menu(): ...
def stock_add(): ...
def stock_list_ids(): ...
def stock_lookup(): ...
def target_list_add_image_targets(): ...
def target_list_add_rich_text_targets(): ...
def target_list_add_text_targets(): ...
def target_list_add_uri_targets(): ...
def targets_include_image(): ...
def targets_include_rich_text(): ...
def targets_include_text(): ...
def targets_include_uri(): ...
def tooltip_trigger_tooltip_query(): ...
def tooltips_data_get(): ...
def vbutton_box_get_layout_default(): ...
def vbutton_box_get_spacing_default(): ...
def vbutton_box_set_layout_default(): ...
def vbutton_box_set_spacing_default(): ...
def widget_class_find_style_property(): ...
def widget_class_install_style_property(): ...
def widget_class_list_style_properties(): ...
def widget_get_default_colormap(): ...
def widget_get_default_direction(): ...
def widget_get_default_style(): ...
def widget_get_default_visual(): ...
def widget_pop_colormap(): ...
def widget_pop_composite_child(): ...
def widget_push_colormap(): ...
def widget_push_composite_child(): ...
def widget_set_default_colormap(): ...
def widget_set_default_direction(): ...
def window_get_default_icon_list(): ...
def window_list_toplevels(): ...
def window_set_auto_startup_notification(): ...
def window_set_default_icon(): ...
def window_set_default_icon_from_file(): ...
def window_set_default_icon_list(): ...
def window_set_default_icon_name(): ...
